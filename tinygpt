{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0a0a052a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-27T14:02:56.377294Z",
     "iopub.status.busy": "2024-07-27T14:02:56.376900Z",
     "iopub.status.idle": "2024-07-27T14:03:09.245572Z",
     "shell.execute_reply": "2024-07-27T14:03:09.244605Z"
    },
    "papermill": {
     "duration": 12.879755,
     "end_time": "2024-07-27T14:03:09.248161",
     "exception": false,
     "start_time": "2024-07-27T14:02:56.368406",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, MultiHeadAttention, Embedding, Add, Dropout, LayerNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import numpy as np\n",
    "import bisect\n",
    "import re\n",
    "import math\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6b18f0eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:09.263048Z",
     "iopub.status.busy": "2024-07-27T14:03:09.262463Z",
     "iopub.status.idle": "2024-07-27T14:03:09.270094Z",
     "shell.execute_reply": "2024-07-27T14:03:09.269161Z"
    },
    "papermill": {
     "duration": 0.017386,
     "end_time": "2024-07-27T14:03:09.272234",
     "exception": false,
     "start_time": "2024-07-27T14:03:09.254848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# My tokenkization\\nfrom nltk.corpus import brown\\n\\nfor file in brown.fileids():\\n    clean_file = re.sub(r\\'/[^\\\\s]+\\', \\' \\', brown.raw(file))\\n    dataset += clean_file + \"\\n\" # Concatenate all the files together\\n\\ndataset = re.sub(r\\'\\\\s+\\', \\' \\', dataset)\\nlen(dataset) # Number of characters\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "# My tokenkization\n",
    "from nltk.corpus import brown\n",
    "\n",
    "for file in brown.fileids():\n",
    "    clean_file = re.sub(r'/[^\\s]+', ' ', brown.raw(file))\n",
    "    dataset += clean_file + \"\\n\" # Concatenate all the files together\n",
    "\n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "len(dataset) # Number of characters\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab7188a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:09.286876Z",
     "iopub.status.busy": "2024-07-27T14:03:09.286534Z",
     "iopub.status.idle": "2024-07-27T14:03:10.505159Z",
     "shell.execute_reply": "2024-07-27T14:03:10.504085Z"
    },
    "papermill": {
     "duration": 1.228576,
     "end_time": "2024-07-27T14:03:10.507356",
     "exception": false,
     "start_time": "2024-07-27T14:03:09.278780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6068922"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "dataset = \"\"\n",
    "\n",
    "texts = pd.read_csv('/kaggle/input/brown.csv')[\"tokenized_text\"]\n",
    "for text in texts:\n",
    "    dataset += text\n",
    "\n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "len(dataset) # Number of characters   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b818ea75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:10.522306Z",
     "iopub.status.busy": "2024-07-27T14:03:10.521949Z",
     "iopub.status.idle": "2024-07-27T14:03:11.853298Z",
     "shell.execute_reply": "2024-07-27T14:03:11.852452Z"
    },
    "papermill": {
     "duration": 1.341836,
     "end_time": "2024-07-27T14:03:11.855780",
     "exception": false,
     "start_time": "2024-07-27T14:03:10.513944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Separate the punctuation from the words by a space\n",
    "dataset = re.sub('[^a-zA-Z0-9]', lambda x: \" \" + x.group(0)[0] + \" \", dataset)\n",
    "# chains of punctuation must be deleted from the dataset.\n",
    "\n",
    "dataset = dataset.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e491fe3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:11.871115Z",
     "iopub.status.busy": "2024-07-27T14:03:11.870787Z",
     "iopub.status.idle": "2024-07-27T14:03:11.978104Z",
     "shell.execute_reply": "2024-07-27T14:03:11.977172Z"
    },
    "papermill": {
     "duration": 0.117366,
     "end_time": "2024-07-27T14:03:11.980113",
     "exception": false,
     "start_time": "2024-07-27T14:03:11.862747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49513"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = sorted(set(dataset))\n",
    "vocab_size = len(vocab) + 2\n",
    "vocab_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5231ccce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:11.995203Z",
     "iopub.status.busy": "2024-07-27T14:03:11.994838Z",
     "iopub.status.idle": "2024-07-27T14:03:12.564151Z",
     "shell.execute_reply": "2024-07-27T14:03:12.563137Z"
    },
    "papermill": {
     "duration": 0.57924,
     "end_time": "2024-07-27T14:03:12.566474",
     "exception": false,
     "start_time": "2024-07-27T14:03:11.987234",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "948"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentences = \" \".join(dataset).split(\".\")\n",
    "sentences = [s.split() for s in sentences if len(s.split())>0]\n",
    "max_length = max([len(s) for s in sentences])\n",
    "max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "54848c3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:12.582749Z",
     "iopub.status.busy": "2024-07-27T14:03:12.582401Z",
     "iopub.status.idle": "2024-07-27T14:03:12.616482Z",
     "shell.execute_reply": "2024-07-27T14:03:12.615268Z"
    },
    "papermill": {
     "duration": 0.044781,
     "end_time": "2024-07-27T14:03:12.618647",
     "exception": false,
     "start_time": "2024-07-27T14:03:12.573866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21.18903738486545 16.351833279814446 127.0\n"
     ]
    }
   ],
   "source": [
    "lengths = [len(s) for s in sentences]\n",
    "print(np.mean(lengths), np.std(lengths), np.quantile(lengths, .999))\n",
    "\n",
    "# 1 in 1000 sentences exceed 128 so 128 it is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f8a6d241",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:12.634207Z",
     "iopub.status.busy": "2024-07-27T14:03:12.633884Z",
     "iopub.status.idle": "2024-07-27T14:03:14.713331Z",
     "shell.execute_reply": "2024-07-27T14:03:14.712553Z"
    },
    "papermill": {
     "duration": 2.090218,
     "end_time": "2024-07-27T14:03:14.715820",
     "exception": false,
     "start_time": "2024-07-27T14:03:12.625602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sentence_length = 128 # 2 ** math.ceil(math.log2(max_length)) if we want to\n",
    "# include every sentence. But truncating 1 in 1000 for 8x memory saving seems\n",
    "# obvious.\n",
    "pad_id = 0\n",
    "start_id = 1\n",
    "\n",
    "point = bisect.bisect_left(vocab, '.') + 2\n",
    "dataset = np.zeros((len(sentences),  sentence_length + 1), dtype = np.float32) + pad_id\n",
    "\n",
    "for i, sentence in enumerate(sentences):\n",
    "    dataset[i, :min(len(sentence) + 2, sentence_length + 1)] = np.array([start_id] + [bisect.bisect_left(vocab, word) + 2 for word in sentence][:sentence_length - 1] + [point], dtype = np.float32)\n",
    "\n",
    "vocab = [\"<PAD>\", \"<S>\"] + vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "db3c6e87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:14.732489Z",
     "iopub.status.busy": "2024-07-27T14:03:14.732118Z",
     "iopub.status.idle": "2024-07-27T14:03:14.738004Z",
     "shell.execute_reply": "2024-07-27T14:03:14.737113Z"
    },
    "papermill": {
     "duration": 0.016371,
     "end_time": "2024-07-27T14:03:14.739991",
     "exception": false,
     "start_time": "2024-07-27T14:03:14.723620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(tf.keras.Model):\n",
    "    def __init__(self, emb_dim, units):\n",
    "        super().__init__()\n",
    "        self.dense1 = Dense(units, activation = \"relu\")\n",
    "        self.dense2 = Dense(emb_dim)\n",
    "        \n",
    "    def call(self, x):\n",
    "        x = self.dense1(x)\n",
    "        out = self.dense2(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dcb275c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:14.755144Z",
     "iopub.status.busy": "2024-07-27T14:03:14.754796Z",
     "iopub.status.idle": "2024-07-27T14:03:14.765108Z",
     "shell.execute_reply": "2024-07-27T14:03:14.764172Z"
    },
    "papermill": {
     "duration": 0.020321,
     "end_time": "2024-07-27T14:03:14.767317",
     "exception": false,
     "start_time": "2024-07-27T14:03:14.746996",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Decoder(tf.keras.Model):\n",
    "    def __init__(self, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        self.mha = MultiHeadAttention(n_heads, emb_dim//n_heads)\n",
    "        self.dropout1 =  Dropout(dropout)\n",
    "        self.ln1 = LayerNormalization()\n",
    "        \n",
    "        self.ffn = FeedForward(emb_dim, units)\n",
    "        self.dropout2 =  Dropout(dropout)\n",
    "        self.ln2 = LayerNormalization()\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        # Masked multi-head self-attention\n",
    "        # The mask for the padding is problematic to implement here and it's more \n",
    "        # convenient to mask the loss function and we just use the look-ahead mask here.\n",
    "        x1 = self.mha(x, x, x, use_causal_mask = True)\n",
    "        x1 = self.dropout1(x, training = training)\n",
    "        x = self.ln1(x1 + x)\n",
    "        \n",
    "        x2 = self.ffn(x)\n",
    "        x2 = self.dropout2(x, training = training)\n",
    "        x = self.ln2(x + x2)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "941b3d3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:14.783341Z",
     "iopub.status.busy": "2024-07-27T14:03:14.783032Z",
     "iopub.status.idle": "2024-07-27T14:03:14.791176Z",
     "shell.execute_reply": "2024-07-27T14:03:14.790414Z"
    },
    "papermill": {
     "duration": 0.018899,
     "end_time": "2024-07-27T14:03:14.793061",
     "exception": false,
     "start_time": "2024-07-27T14:03:14.774162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, vocab_size, sentence_length = 256, n = 6, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        # Embedding layer\n",
    "        self.embedding = Embedding(vocab_size, emb_dim, input_length = sentence_length)\n",
    "        # Positional encoding\n",
    "        self.pos_encode = Add()\n",
    "        self.decoder_stack = [Decoder(n_heads, emb_dim, units, dropout) for _ in range(n)]\n",
    "        self.linear = Dense(vocab_size, activation = tf.nn.log_softmax)\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        \n",
    "        x = self.embedding(x)\n",
    "        x = self.pos_encode([x, pos_encoding])\n",
    "        \n",
    "        for decoder in self.decoder_stack:\n",
    "            x = decoder(x, training)\n",
    "        \n",
    "        out = self.linear(x)\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "85ad032a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:14.808670Z",
     "iopub.status.busy": "2024-07-27T14:03:14.807969Z",
     "iopub.status.idle": "2024-07-27T14:03:14.814840Z",
     "shell.execute_reply": "2024-07-27T14:03:14.813950Z"
    },
    "papermill": {
     "duration": 0.016871,
     "end_time": "2024-07-27T14:03:14.816978",
     "exception": false,
     "start_time": "2024-07-27T14:03:14.800107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For a generative model, label smoothing simply hurts perplexity which is what we care \n",
    "# about most. \n",
    "epsilon  = 0.0\n",
    "\n",
    "def masked_loss(label, pred, pad_id = 0):\n",
    "    mask = label != pad_id\n",
    "    \n",
    "    y = tf.one_hot(tf.cast(label, tf.int32), vocab_size, axis = -1)\n",
    "    loss_object = tf.keras.losses.CategoricalCrossentropy(\n",
    "    from_logits=True, reduction='none', label_smoothing = epsilon)\n",
    "    loss = loss_object(y, pred)\n",
    "    \n",
    "    mask = tf.cast(mask, dtype=loss.dtype)\n",
    "    loss *= mask\n",
    "\n",
    "    loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a7a791ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:14.832396Z",
     "iopub.status.busy": "2024-07-27T14:03:14.832100Z",
     "iopub.status.idle": "2024-07-27T14:03:14.838460Z",
     "shell.execute_reply": "2024-07-27T14:03:14.837655Z"
    },
    "papermill": {
     "duration": 0.016407,
     "end_time": "2024-07-27T14:03:14.840374",
     "exception": false,
     "start_time": "2024-07-27T14:03:14.823967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerLearningRateSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, initial_learning_rate, warmup_steps):\n",
    "        self.initial_learning_rate = initial_learning_rate\n",
    "        self.warmup_steps = warmup_steps\n",
    "\n",
    "    def __call__(self, step):\n",
    "        x1 = tf.math.pow(10 / tf.math.sqrt(tf.cast(step, tf.float32)), tf.constant([-0.5]))\n",
    "        x2 =  tf.cast(step, tf.float32) * tf.constant([10 * warmup_steps**-1.5])\n",
    "        return self.initial_learning_rate * tf.math.minimum(x1, x2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "87a00068",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:14.855428Z",
     "iopub.status.busy": "2024-07-27T14:03:14.855095Z",
     "iopub.status.idle": "2024-07-27T14:03:15.806857Z",
     "shell.execute_reply": "2024-07-27T14:03:15.805717Z"
    },
    "papermill": {
     "duration": 0.962369,
     "end_time": "2024-07-27T14:03:15.809640",
     "exception": false,
     "start_time": "2024-07-27T14:03:14.847271",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emb_dim = 512\n",
    "n_heads = 8\n",
    "units = 2048\n",
    "n = 6\n",
    "dropout = 0.0\n",
    "warmup_steps = 200\n",
    "learning_rate = 1e-3\n",
    "# Using a different learning rate than the paper as they train for many more steps.\n",
    "#learning_rate_schedule = TransformerLearningRateSchedule(emb_dim**-.5, 200)\n",
    "optimizer = Adam(learning_rate, beta_1 = .9, beta_2 = .998, epsilon = 1e-9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "111a0b8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:15.831732Z",
     "iopub.status.busy": "2024-07-27T14:03:15.830814Z",
     "iopub.status.idle": "2024-07-27T14:03:15.847890Z",
     "shell.execute_reply": "2024-07-27T14:03:15.846965Z"
    },
    "papermill": {
     "duration": 0.030505,
     "end_time": "2024-07-27T14:03:15.850143",
     "exception": false,
     "start_time": "2024-07-27T14:03:15.819638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Positional encoding\n",
    "pos_encoding = np.zeros((sentence_length, emb_dim))\n",
    "pos = np.arange(sentence_length)[:, np.newaxis]\n",
    "even = np.arange(emb_dim, step = 2)[np.newaxis, :]\n",
    "pos_encoding[:, ::2] = np.sin(pos/10**(4*even/emb_dim))\n",
    "pos_encoding[:, 1::2] = np.cos(pos/10**(4*even/emb_dim))\n",
    "pos_encoding = pos_encoding[np.newaxis, :, :] # Adding the batch dimension\n",
    "pos_encoding = tf.cast(pos_encoding, dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "522470e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:15.871348Z",
     "iopub.status.busy": "2024-07-27T14:03:15.870960Z",
     "iopub.status.idle": "2024-07-27T14:03:17.189055Z",
     "shell.execute_reply": "2024-07-27T14:03:17.188066Z"
    },
    "papermill": {
     "duration": 1.333905,
     "end_time": "2024-07-27T14:03:17.191373",
     "exception": false,
     "start_time": "2024-07-27T14:03:15.857468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"transformer\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       multiple                  25350656  \n",
      "                                                                 \n",
      " add (Add)                   multiple                  0         \n",
      "                                                                 \n",
      " decoder (Decoder)           multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_1 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_2 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_3 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_4 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_5 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " dense_12 (Dense)            multiple                  25400169  \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 69665129 (265.75 MB)\n",
      "Trainable params: 69665129 (265.75 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Transformer(vocab_size, sentence_length, n, n_heads, emb_dim, units, dropout)\n",
    "model.compile(optimizer, masked_loss, metrics = [\"accuracy\"])\n",
    "model.build((None, sentence_length))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9d8e2520",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:03:17.212582Z",
     "iopub.status.busy": "2024-07-27T14:03:17.212218Z",
     "iopub.status.idle": "2024-07-27T14:19:26.846646Z",
     "shell.execute_reply": "2024-07-27T14:19:26.845768Z"
    },
    "papermill": {
     "duration": 969.648316,
     "end_time": "2024-07-27T14:19:26.849358",
     "exception": false,
     "start_time": "2024-07-27T14:03:17.201042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n",
      "1644/1644 [==============================] - 491s 294ms/step - loss: 6.3402 - accuracy: 0.0252 - val_loss: 6.1281 - val_accuracy: 0.0296\n",
      "Epoch 2/2\n",
      "1644/1644 [==============================] - 478s 291ms/step - loss: 5.6012 - accuracy: 0.0307 - val_loss: 6.1711 - val_accuracy: 0.0298\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "epochs = 2\n",
    "\n",
    "# X is simply the expected output shifted to the right with a <S> token at the beginning.\n",
    "history = model.fit(dataset[:, :-1], dataset[:, 1:], batch_size, epochs, validation_split = .05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2f4260dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:19:27.469352Z",
     "iopub.status.busy": "2024-07-27T14:19:27.468914Z",
     "iopub.status.idle": "2024-07-27T14:19:28.246861Z",
     "shell.execute_reply": "2024-07-27T14:19:28.245853Z"
    },
    "papermill": {
     "duration": 1.091129,
     "end_time": "2024-07-27T14:19:28.249492",
     "exception": false,
     "start_time": "2024-07-27T14:19:27.158363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot training & validation accuracy values\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Val Accuracy')\n",
    "plt.title('Model Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend(loc='upper left')\n",
    "\n",
    "# Plot training & validation loss values\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Val Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend(loc='upper right')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "995606f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:19:28.863397Z",
     "iopub.status.busy": "2024-07-27T14:19:28.862987Z",
     "iopub.status.idle": "2024-07-27T14:19:29.092922Z",
     "shell.execute_reply": "2024-07-27T14:19:29.091741Z"
    },
    "papermill": {
     "duration": 0.53806,
     "end_time": "2024-07-27T14:19:29.095389",
     "exception": false,
     "start_time": "2024-07-27T14:19:28.557329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Furthermore 0.00020584101730491966\n",
      ", 0.9634575247764587\n",
      "as 0.013948832638561726\n",
      "an 0.027809416875243187\n",
      "encouragement 0.00011628390348050743\n",
      "to 0.17583025991916656\n",
      "revisionist 7.696087777731009e-06\n",
      "thinking 0.002459534676745534\n",
      ", 0.10579781979322433\n",
      "it 0.013392774388194084\n",
      "manifestly 3.4881926694652066e-05\n",
      "is 0.020129375159740448\n",
      "fair 0.00016575750487390906\n",
      "to 0.03597000986337662\n",
      "admit 0.00040972791612148285\n",
      "that 0.45172932744026184\n",
      "any 0.003485564375296235\n",
      "fraternity 8.781356154941022e-05\n",
      "has 0.007377325557172298\n",
      "a 0.0471750907599926\n",
      "constitutional 7.406567601719871e-05\n",
      "right 0.0013067910913378\n",
      "to 0.11731527000665665\n",
      "refuse 0.00015822096611373127\n",
      "to 0.2911536991596222\n",
      "accept 0.0016230209730565548\n",
      "persons 7.059689232846722e-05\n",
      "it 0.0013896843884140253\n",
      "dislikes 7.988875586306676e-05\n",
      ". 0.7074392437934875\n"
     ]
    }
   ],
   "source": [
    "# Examining the 1st example.\n",
    "x = dataset[0]\n",
    "am = tf.nn.softmax(model(tf.reshape(x[:-1], (1, sentence_length))), axis = -1)\n",
    "indices = map(int, x[1:])\n",
    "am = tf.reshape(am, (-1, vocab_size))\n",
    "probs = []\n",
    "for i, idx in enumerate(indices):\n",
    "    if idx == 0:\n",
    "        break\n",
    "    print(vocab[idx], float(am[i, idx]))\n",
    "    probs.append(float(am[i, idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "23ba8182",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:19:29.778315Z",
     "iopub.status.busy": "2024-07-27T14:19:29.777765Z",
     "iopub.status.idle": "2024-07-27T14:20:26.090467Z",
     "shell.execute_reply": "2024-07-27T14:20:26.089290Z"
    },
    "papermill": {
     "duration": 56.692644,
     "end_time": "2024-07-27T14:20:26.093299",
     "exception": false,
     "start_time": "2024-07-27T14:19:29.400655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "` ` ` I was a couple of the street , and he added that the subject to be said , the same time to meet the same time .\n",
      "` ` But at the conclusion of the same time , of the wing , he is one of the most of the minds and where the street .\n",
      "What are his mind and the Soviet Union of the street , how to be sure the social institutions , has been a back , but they were not to make it .\n",
      "` ` the earth ' ' ' ' ' ' ' ' t even with the two days of the pool .\n",
      "The theme .\n",
      "The general , has been carried out of the right ' , a special decomposition of the direction of the first or even a Communist support him to the mind .\n",
      "We are , you will be a single scene , the second curtain , and the fat man to be the very well as they have robbed .\n",
      "The scene was a way of the discrepancy between the world - - - - and we were not become enormous manner as the face .\n",
      "` ` ` ` I ' s military position , and the previous day at the way .\n",
      "The only Mrs .\n",
      "The old man in the next morning , and the night at the Reverend ' .\n",
      "The fast .\n",
      "The anode is to the other men , for the seventh Vita ' .\n",
      "` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` I ' ' .\n",
      "S .\n",
      "He said .\n",
      "For the rear of the most of God , of the pillow .\n",
      "How can ' s thighs for the annual changes in the nearest little more evident .\n",
      "The old man had been doing it ' ' s pictures .\n",
      "Bisque the morning ' ' ! He led to find a situation , and the season .\n",
      "The same was the cup of the critics , just easy for a large writers .\n",
      "It was also a Christian struggle with the material .\n",
      "There are , you are to the privilege of the first time to the friction of it would have had gone out and will be , the most outstanding in the students , and , and the total of the same manner , as a lot of leadership .\n",
      "And , the world is that for the ` ` ` bureaucracy .\n",
      "The extent to the platform ' ' ' .\n"
     ]
    }
   ],
   "source": [
    "def softmax(logits, axis = -1):\n",
    "    e = np.exp(logits)\n",
    "    return e/np.sum(e, axis = axis)\n",
    "\n",
    "def sample(n = 10, temperature = .7):\n",
    "    for _ in range(n):\n",
    "        x = np.zeros((sentence_length + 1)) \n",
    "        # The first token is <S> which is irrelevant to the output.\n",
    "        x[0] = 1 # I could've used one-hot but making a sentence with one-hot seems weird. \n",
    "        i = 0\n",
    "        choices = []\n",
    "        choice = 0\n",
    "        indices = list(range(vocab_size))\n",
    "        \n",
    "        while choice != point and i < sentence_length:\n",
    "            out = np.ravel(model(x[:-1].reshape(1, sentence_length))[0, i])\n",
    "            # output shape is (batch_size, sentence_length, vocab_size)\n",
    "            probs = softmax(out / temperature, axis = -1)\n",
    "            choice = np.random.choice(indices, p = probs)\n",
    "            i = i+1\n",
    "            x[i] = choice\n",
    "            choices.append(choice)\n",
    "\n",
    "        sample = \" \".join(map(lambda x : vocab[x], choices))\n",
    "        print(sample)\n",
    "\n",
    "sample(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f182e042",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-27T14:20:26.724566Z",
     "iopub.status.busy": "2024-07-27T14:20:26.723521Z",
     "iopub.status.idle": "2024-07-27T14:20:26.728354Z",
     "shell.execute_reply": "2024-07-27T14:20:26.727376Z"
    },
    "papermill": {
     "duration": 0.32468,
     "end_time": "2024-07-27T14:20:26.730442",
     "exception": false,
     "start_time": "2024-07-27T14:20:26.405762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.save(\"GPT.keras\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2058,
     "sourceId": 131078,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30616,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1057.152944,
   "end_time": "2024-07-27T14:20:29.913109",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-27T14:02:52.760165",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
