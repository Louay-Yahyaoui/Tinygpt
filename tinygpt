{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e3832515",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:03.064658Z",
     "iopub.status.busy": "2024-07-29T13:23:03.064303Z",
     "iopub.status.idle": "2024-07-29T13:23:15.182990Z",
     "shell.execute_reply": "2024-07-29T13:23:15.182165Z"
    },
    "papermill": {
     "duration": 12.128537,
     "end_time": "2024-07-29T13:23:15.185278",
     "exception": false,
     "start_time": "2024-07-29T13:23:03.056741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, MultiHeadAttention, Embedding, Add, Dropout, LayerNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import numpy as np\n",
    "import bisect\n",
    "import re\n",
    "import math\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "991846f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:15.198976Z",
     "iopub.status.busy": "2024-07-29T13:23:15.198139Z",
     "iopub.status.idle": "2024-07-29T13:23:15.205162Z",
     "shell.execute_reply": "2024-07-29T13:23:15.204375Z"
    },
    "papermill": {
     "duration": 0.015566,
     "end_time": "2024-07-29T13:23:15.207039",
     "exception": false,
     "start_time": "2024-07-29T13:23:15.191473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# My tokenkization\\nfrom nltk.corpus import brown\\n\\nfor file in brown.fileids():\\n    clean_file = re.sub(r\\'/[^\\\\s]+\\', \\' \\', brown.raw(file))\\n    dataset += clean_file + \"\\n\" # Concatenate all the files together\\n\\ndataset = re.sub(r\\'\\\\s+\\', \\' \\', dataset)\\nlen(dataset) # Number of characters\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "# My tokenkization\n",
    "from nltk.corpus import brown\n",
    "\n",
    "for file in brown.fileids():\n",
    "    clean_file = re.sub(r'/[^\\s]+', ' ', brown.raw(file))\n",
    "    dataset += clean_file + \"\\n\" # Concatenate all the files together\n",
    "\n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "len(dataset) # Number of characters\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eb7dbbd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:15.219945Z",
     "iopub.status.busy": "2024-07-29T13:23:15.219654Z",
     "iopub.status.idle": "2024-07-29T13:23:16.726758Z",
     "shell.execute_reply": "2024-07-29T13:23:16.725928Z"
    },
    "papermill": {
     "duration": 1.516316,
     "end_time": "2024-07-29T13:23:16.729260",
     "exception": false,
     "start_time": "2024-07-29T13:23:15.212944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "dataset = \"\"\n",
    "\n",
    "texts = pd.read_csv('/kaggle/input/brown.csv')[\"tokenized_text\"]\n",
    "for text in texts:\n",
    "    dataset += text\n",
    "# Separate the punctuation from the words by a space\n",
    "dataset = re.sub('[^a-zA-Z0-9\\s]+', lambda x: x.group(0)[0] , dataset)    \n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "\n",
    "dataset = dataset.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7acee4af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:16.744166Z",
     "iopub.status.busy": "2024-07-29T13:23:16.743550Z",
     "iopub.status.idle": "2024-07-29T13:23:16.862793Z",
     "shell.execute_reply": "2024-07-29T13:23:16.861925Z"
    },
    "papermill": {
     "duration": 0.130894,
     "end_time": "2024-07-29T13:23:16.866254",
     "exception": false,
     "start_time": "2024-07-29T13:23:16.735360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61264"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = sorted(set(dataset))\n",
    "vocab_size = len(vocab) + 2\n",
    "vocab_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "50e1fe8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:16.897853Z",
     "iopub.status.busy": "2024-07-29T13:23:16.897196Z",
     "iopub.status.idle": "2024-07-29T13:23:17.427843Z",
     "shell.execute_reply": "2024-07-29T13:23:17.426946Z"
    },
    "papermill": {
     "duration": 0.539906,
     "end_time": "2024-07-29T13:23:17.429979",
     "exception": false,
     "start_time": "2024-07-29T13:23:16.890073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "830"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentences = \" \".join(dataset).split(\".\")\n",
    "sentences = [s.split() for s in sentences if len(s.split())>0]\n",
    "max_length = max([len(s) for s in sentences])\n",
    "max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4946455c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:17.443503Z",
     "iopub.status.busy": "2024-07-29T13:23:17.443222Z",
     "iopub.status.idle": "2024-07-29T13:23:17.474853Z",
     "shell.execute_reply": "2024-07-29T13:23:17.473855Z"
    },
    "papermill": {
     "duration": 0.040462,
     "end_time": "2024-07-29T13:23:17.476691",
     "exception": false,
     "start_time": "2024-07-29T13:23:17.436229",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.899629529231046 15.372308871704446 118.66599999999744\n"
     ]
    }
   ],
   "source": [
    "lengths = [len(s) for s in sentences]\n",
    "print(np.mean(lengths), np.std(lengths), np.quantile(lengths, .999))\n",
    "\n",
    "# 1 in 1000 sentences exceed 128 so 128 it is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1e8c1876",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:17.491552Z",
     "iopub.status.busy": "2024-07-29T13:23:17.491266Z",
     "iopub.status.idle": "2024-07-29T13:23:19.343666Z",
     "shell.execute_reply": "2024-07-29T13:23:19.342621Z"
    },
    "papermill": {
     "duration": 1.862795,
     "end_time": "2024-07-29T13:23:19.346337",
     "exception": false,
     "start_time": "2024-07-29T13:23:17.483542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sentence_length = 128 # 2 ** math.ceil(math.log2(max_length)) if we want to\n",
    "# include every sentence. But truncating 1 in 1000 for 8x memory saving seems\n",
    "# obvious.\n",
    "pad_id = 0\n",
    "start_id = 1\n",
    "\n",
    "point = bisect.bisect_left(vocab, '.') + 2\n",
    "dataset = np.zeros((len(sentences),  sentence_length + 1), dtype = np.float32) + pad_id\n",
    "\n",
    "for i, sentence in enumerate(sentences):\n",
    "    dataset[i, :min(len(sentence) + 2, sentence_length + 1)] = np.array([start_id] + [bisect.bisect_left(vocab, word) + 2 for word in sentence][:sentence_length - 1] + [point], dtype = np.float32)\n",
    "\n",
    "vocab = [\"<PAD>\", \"<S>\"] + vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "303c3b0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:19.360288Z",
     "iopub.status.busy": "2024-07-29T13:23:19.359970Z",
     "iopub.status.idle": "2024-07-29T13:23:19.365683Z",
     "shell.execute_reply": "2024-07-29T13:23:19.364670Z"
    },
    "papermill": {
     "duration": 0.015022,
     "end_time": "2024-07-29T13:23:19.367832",
     "exception": false,
     "start_time": "2024-07-29T13:23:19.352810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(tf.keras.Model):\n",
    "    def __init__(self, emb_dim, units):\n",
    "        super().__init__()\n",
    "        self.dense1 = Dense(units, activation = \"relu\")\n",
    "        self.dense2 = Dense(emb_dim)\n",
    "        \n",
    "    def call(self, x):\n",
    "        x = self.dense1(x)\n",
    "        out = self.dense2(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "38bf7152",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:19.381359Z",
     "iopub.status.busy": "2024-07-29T13:23:19.381101Z",
     "iopub.status.idle": "2024-07-29T13:23:19.388509Z",
     "shell.execute_reply": "2024-07-29T13:23:19.387676Z"
    },
    "papermill": {
     "duration": 0.016236,
     "end_time": "2024-07-29T13:23:19.390425",
     "exception": false,
     "start_time": "2024-07-29T13:23:19.374189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Decoder(tf.keras.Model):\n",
    "    def __init__(self, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        self.mha = MultiHeadAttention(n_heads, emb_dim//n_heads)\n",
    "        self.dropout1 =  Dropout(dropout)\n",
    "        self.ln1 = LayerNormalization()\n",
    "        \n",
    "        self.ffn = FeedForward(emb_dim, units)\n",
    "        self.dropout2 =  Dropout(dropout)\n",
    "        self.ln2 = LayerNormalization()\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        # Masked multi-head self-attention\n",
    "        # The mask for the padding is problematic to implement here and it's more \n",
    "        # convenient to mask the loss function and we just use the look-ahead mask here.\n",
    "        x1 = self.mha(x, x, x, use_causal_mask = True)\n",
    "        x1 = self.dropout1(x1, training = training)\n",
    "        x = self.ln1(x1 + x)\n",
    "        \n",
    "        x2 = self.ffn(x)\n",
    "        x2 = self.dropout2(x2, training = training)\n",
    "        x = self.ln2(x + x2)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6545023c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:19.403627Z",
     "iopub.status.busy": "2024-07-29T13:23:19.403356Z",
     "iopub.status.idle": "2024-07-29T13:23:19.410586Z",
     "shell.execute_reply": "2024-07-29T13:23:19.409741Z"
    },
    "papermill": {
     "duration": 0.016024,
     "end_time": "2024-07-29T13:23:19.412487",
     "exception": false,
     "start_time": "2024-07-29T13:23:19.396463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, vocab_size, sentence_length = 256, n = 6, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        # Embedding layer\n",
    "        self.embedding = Embedding(vocab_size, emb_dim, input_length = sentence_length)\n",
    "        # Positional encoding\n",
    "        self.pos_encode = Add()\n",
    "        self.decoder_stack = [Decoder(n_heads, emb_dim, units, dropout) for _ in range(n)]\n",
    "        self.linear = Dense(vocab_size, activation = tf.nn.log_softmax)\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        \n",
    "        x = self.embedding(x)\n",
    "        x = self.pos_encode([x, pos_encoding])\n",
    "        \n",
    "        for decoder in self.decoder_stack:\n",
    "            x = decoder(x, training)\n",
    "        \n",
    "        out = self.linear(x)\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f755c4c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:19.425858Z",
     "iopub.status.busy": "2024-07-29T13:23:19.425550Z",
     "iopub.status.idle": "2024-07-29T13:23:19.431708Z",
     "shell.execute_reply": "2024-07-29T13:23:19.430897Z"
    },
    "papermill": {
     "duration": 0.01518,
     "end_time": "2024-07-29T13:23:19.433693",
     "exception": false,
     "start_time": "2024-07-29T13:23:19.418513",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For a generative model, label smoothing simply hurts perplexity which is what we care \n",
    "# about most. \n",
    "epsilon  = 0.0 # 0.1\n",
    "\n",
    "def masked_loss(label, pred, pad_id = 0):\n",
    "    mask = label != pad_id\n",
    "    \n",
    "    y = tf.one_hot(tf.cast(label, tf.int32), vocab_size, axis = -1)\n",
    "    loss_object = tf.keras.losses.CategoricalCrossentropy(\n",
    "    from_logits=True, reduction='none', label_smoothing = epsilon)\n",
    "    loss = loss_object(y, pred)\n",
    "    \n",
    "    mask = tf.cast(mask, dtype=loss.dtype)\n",
    "    loss *= mask\n",
    "\n",
    "    loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d672e7d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:19.447823Z",
     "iopub.status.busy": "2024-07-29T13:23:19.447560Z",
     "iopub.status.idle": "2024-07-29T13:23:19.455011Z",
     "shell.execute_reply": "2024-07-29T13:23:19.454217Z"
    },
    "papermill": {
     "duration": 0.016115,
     "end_time": "2024-07-29T13:23:19.456792",
     "exception": false,
     "start_time": "2024-07-29T13:23:19.440677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerLearningRateSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, initial_learning_rate, warmup_steps, dtype=tf.float32):\n",
    "        super(TransformerLearningRateSchedule, self).__init__()\n",
    "        self.initial_learning_rate = initial_learning_rate\n",
    "        self.dtype = dtype\n",
    "        self.warmup_steps = tf.cast(warmup_steps, self.dtype)\n",
    "\n",
    "    def __call__(self, step):\n",
    "        step = tf.cast(step, self.dtype)\n",
    "        warmup_steps = tf.cast(self.warmup_steps, self.dtype)\n",
    "        x1 = tf.math.pow(step, tf.constant(-0.5, dtype = self.dtype))\n",
    "        x2 = step * tf.math.pow(self.warmup_steps, tf.constant(-1.5, dtype = self.dtype))\n",
    "        return self.initial_learning_rate * tf.math.minimum(x1, x2)\n",
    "\n",
    "    def get_config(self):\n",
    "        return {\n",
    "            'initial_learning_rate': self.initial_learning_rate,\n",
    "            'warmup_steps': self.warmup_steps,\n",
    "            'dtype': self.dtype\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "367f1c37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:19.470073Z",
     "iopub.status.busy": "2024-07-29T13:23:19.469595Z",
     "iopub.status.idle": "2024-07-29T13:23:20.362522Z",
     "shell.execute_reply": "2024-07-29T13:23:20.361524Z"
    },
    "papermill": {
     "duration": 0.90207,
     "end_time": "2024-07-29T13:23:20.364930",
     "exception": false,
     "start_time": "2024-07-29T13:23:19.462860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emb_dim = 512\n",
    "n_heads = 8\n",
    "units = 2048\n",
    "n = 3 # 6\n",
    "dropout = 0.1 # 0.1\n",
    "warmup_steps = 4000\n",
    "#learning_rate = 1e-4\n",
    "# Using a different learning rate than the paper as they train for many more steps.\n",
    "learning_rate_schedule = TransformerLearningRateSchedule(emb_dim**-.5, warmup_steps)\n",
    "optimizer = Adam(learning_rate_schedule, beta_1 = .9, beta_2 = .998, epsilon = 1e-9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c925ed13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:20.379269Z",
     "iopub.status.busy": "2024-07-29T13:23:20.378754Z",
     "iopub.status.idle": "2024-07-29T13:23:20.390156Z",
     "shell.execute_reply": "2024-07-29T13:23:20.389323Z"
    },
    "papermill": {
     "duration": 0.02062,
     "end_time": "2024-07-29T13:23:20.392197",
     "exception": false,
     "start_time": "2024-07-29T13:23:20.371577",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Positional encoding\n",
    "pos_encoding = np.zeros((sentence_length, emb_dim))\n",
    "pos = np.arange(sentence_length)[:, np.newaxis]\n",
    "even = np.arange(emb_dim, step = 2)[np.newaxis, :]\n",
    "pos_encoding[:, ::2] = np.sin(pos/10**(4*even/emb_dim))\n",
    "pos_encoding[:, 1::2] = np.cos(pos/10**(4*even/emb_dim))\n",
    "pos_encoding = pos_encoding[np.newaxis, :, :] # Adding the batch dimension\n",
    "pos_encoding = tf.cast(pos_encoding, dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7b238266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:20.405561Z",
     "iopub.status.busy": "2024-07-29T13:23:20.405295Z",
     "iopub.status.idle": "2024-07-29T13:23:21.105555Z",
     "shell.execute_reply": "2024-07-29T13:23:21.104618Z"
    },
    "papermill": {
     "duration": 0.709093,
     "end_time": "2024-07-29T13:23:21.107509",
     "exception": false,
     "start_time": "2024-07-29T13:23:20.398416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"transformer\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       multiple                  31367168  \n",
      "                                                                 \n",
      " add (Add)                   multiple                  0         \n",
      "                                                                 \n",
      " decoder (Decoder)           multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_1 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_2 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " dense_6 (Dense)             multiple                  31428432  \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 72252752 (275.62 MB)\n",
      "Trainable params: 72252752 (275.62 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Transformer(vocab_size, sentence_length, n, n_heads, emb_dim, units, dropout)\n",
    "model.compile(optimizer, masked_loss)\n",
    "model.build((None, sentence_length))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dbeee950",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:23:21.124523Z",
     "iopub.status.busy": "2024-07-29T13:23:21.124231Z",
     "iopub.status.idle": "2024-07-29T14:33:47.798448Z",
     "shell.execute_reply": "2024-07-29T14:33:47.797391Z"
    },
    "papermill": {
     "duration": 4226.685157,
     "end_time": "2024-07-29T14:33:47.800758",
     "exception": false,
     "start_time": "2024-07-29T13:23:21.115601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1643/1643 [==============================] - 431s 256ms/step - loss: 7.3570 - val_loss: 6.5373\n",
      "Epoch 2/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 6.1928 - val_loss: 6.3618\n",
      "Epoch 3/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 5.8787 - val_loss: 6.2803\n",
      "Epoch 4/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 5.5270 - val_loss: 6.2526\n",
      "Epoch 5/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 5.1982 - val_loss: 6.3279\n",
      "Epoch 6/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 4.8832 - val_loss: 6.4417\n",
      "Epoch 7/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 4.5742 - val_loss: 6.5866\n",
      "Epoch 8/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 4.2791 - val_loss: 6.7410\n",
      "Epoch 9/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 4.0101 - val_loss: 6.9015\n",
      "Epoch 10/10\n",
      "1643/1643 [==============================] - 419s 255ms/step - loss: 3.7736 - val_loss: 7.0714\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "epochs = 10\n",
    "\n",
    "# X is simply the expected output shifted to the right with a <S> token at the beginning.\n",
    "history = model.fit(dataset[:, :-1], dataset[:, 1:], batch_size, epochs, validation_split = .05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ba1b19ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T14:33:50.464583Z",
     "iopub.status.busy": "2024-07-29T14:33:50.464235Z",
     "iopub.status.idle": "2024-07-29T14:33:50.850679Z",
     "shell.execute_reply": "2024-07-29T14:33:50.849769Z"
    },
    "papermill": {
     "duration": 1.685243,
     "end_time": "2024-07-29T14:33:50.852638",
     "exception": false,
     "start_time": "2024-07-29T14:33:49.167395",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Val Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend(loc='upper right')\n",
    "plt.ylim(6, max(history.history['loss'] + history.history['val_loss']))\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f5b01e22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T14:33:53.523044Z",
     "iopub.status.busy": "2024-07-29T14:33:53.522663Z",
     "iopub.status.idle": "2024-07-29T14:33:53.650404Z",
     "shell.execute_reply": "2024-07-29T14:33:53.649331Z"
    },
    "papermill": {
     "duration": 1.425323,
     "end_time": "2024-07-29T14:33:53.652519",
     "exception": false,
     "start_time": "2024-07-29T14:33:52.227196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Furthermore 0.0014137453399598598\n",
      ", 0.8913167715072632\n",
      "as 0.0230296328663826\n",
      "an 0.032610490918159485\n",
      "encouragement 0.02528342977166176\n",
      "to 0.19618120789527893\n",
      "revisionist 0.9682667255401611\n",
      "thinking 0.06112002581357956\n",
      ", 0.41338667273521423\n",
      "it 0.1678258776664734\n",
      "manifestly 0.08056072890758514\n",
      "is 0.030743444338440895\n",
      "fair 0.0051047541201114655\n",
      "to 0.667154848575592\n",
      "admit 0.003469702787697315\n",
      "that 0.23524460196495056\n",
      "any 0.021341685205698013\n",
      "fraternity 0.08341308683156967\n",
      "has 0.09453856945037842\n",
      "a 0.08539324253797531\n",
      "constitutional 0.004216093569993973\n",
      "right 0.00015429608174599707\n",
      "to 0.7784053087234497\n",
      "refuse 0.00523311598226428\n",
      "to 0.4155159592628479\n",
      "accept 0.03979784995317459\n",
      "persons 0.0013726619072258472\n",
      "it 0.00013153263716958463\n",
      "dislikes 0.5145654678344727\n",
      ". 0.664555549621582\n"
     ]
    }
   ],
   "source": [
    "# Examining the 1st example.\n",
    "x = dataset[0]\n",
    "am = tf.nn.softmax(model(tf.reshape(x[:-1], (1, sentence_length))), axis = -1)\n",
    "indices = map(int, x[1:])\n",
    "am = tf.reshape(am, (-1, vocab_size))\n",
    "probs = []\n",
    "for i, idx in enumerate(indices):\n",
    "    if idx == 0:\n",
    "        break\n",
    "    print(vocab[idx], float(am[i, idx]))\n",
    "    probs.append(float(am[i, idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ddf4144c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T14:33:56.322433Z",
     "iopub.status.busy": "2024-07-29T14:33:56.321709Z",
     "iopub.status.idle": "2024-07-29T14:34:27.246382Z",
     "shell.execute_reply": "2024-07-29T14:34:27.245257Z"
    },
    "papermill": {
     "duration": 33.635136,
     "end_time": "2024-07-29T14:34:28.656558",
     "exception": false,
     "start_time": "2024-07-29T14:33:55.021422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Peal birds are not to be found in a manner .\n",
      "It is at first that the lack of matter is based on the race and has been for the same format of the practice of the state , but that the Fellows is a marked sum of the community .\n",
      "What about your country ' ? ?She inquired .\n",
      "And the one will have been in this area if it is a matter of fact ' .\n",
      "I had to call the lights of the hotel , and I were still a Democrat .\n",
      "In a voice in London , the developers were huddled in the Congo and as a writer of criminality in Switzerland ; ;this is designed to do a to say that one is to be the only man , the reasons for his wife .\n",
      "For example , about Af is only represented by a transformed plane .\n",
      "The same purpose of the East is itself new .\n",
      "I think I really can look at them , but I am not so much like a pristine and honest , but not forget that I am not inclined to know the future of my good friends , but that the tendency to paie ' .\n",
      "You can be sure , Dad .\n",
      "In testimony whereof , I have hereunto set my hand into the winds of my company , the best to my company , the more subtle element of our country , the less extensive religions that would be far to be the only effective , or the most spacious perfumed on the occasion .\n",
      "It is another project in the midst of a large discrepancy on the central three decades and that the industry is uncertain , of a total increase in wage rate and the basic wage rate of wage rates on the same end of the wage rate .\n",
      "The other , H factor in which the null space was Af .\n",
      "The first sample by which the gyro is valid and reorganized in an isolated position .\n",
      "He will depend on the office of the evening , and perhaps , one has been the same element .\n",
      "Thus , the basic approach utilized to absorb properties , the only function of the solar System is Af .\n",
      "The most unusual losses of the apparatus was established to the chemical danger of the radical century and the solution of the state of the Belgians .\n",
      "It was only the first time of life .\n",
      "Two years older than Mitch Barton is heard , his wife , who is not holding his horse in bed .\n",
      "The next night , the next day the envelope had come in a fusion ship .\n",
      "He said , ` Let you look for him .\n",
      "No other visitor , was surprised for a note that the door should be lame and identified a criminality in the air .\n",
      "Perhaps , as it is Johnson , the Colonel and one private band , who is still the most reluctant to put a success of orbit and defeat .\n",
      "The simple , cawing hunt of today , is the highest job .\n",
      "The lock is a null-type instrument and the heat of a disk range of an error consisting of an error velocity to form a method .\n"
     ]
    }
   ],
   "source": [
    "def softmax(logits, axis = -1):\n",
    "    e = np.exp(logits)\n",
    "    return e/np.sum(e, axis = axis)\n",
    "\n",
    "def sample(n = 10, temperature = .7):\n",
    "    for _ in range(n):\n",
    "        x = np.zeros((sentence_length + 1)) \n",
    "        # The first token is <S> which is irrelevant to the output.\n",
    "        x[0] = 1 # I could've used one-hot but making a sentence with one-hot seems weird. \n",
    "        i = 0\n",
    "        choices = []\n",
    "        choice = 0\n",
    "        indices = list(range(vocab_size))\n",
    "        \n",
    "        while choice != point and i < sentence_length:\n",
    "            out = np.ravel(model(x[:-1].reshape(1, sentence_length))[0, i])\n",
    "            # output shape is (batch_size, sentence_length, vocab_size)\n",
    "            probs = softmax(out / temperature, axis = -1)\n",
    "            choice = np.random.choice(indices, p = probs)\n",
    "            i = i+1\n",
    "            x[i] = choice\n",
    "            choices.append(choice)\n",
    "\n",
    "        sample = \" \".join(map(lambda x : vocab[x], choices))\n",
    "        print(sample)\n",
    "\n",
    "sample(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7ebd63ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T14:34:31.383382Z",
     "iopub.status.busy": "2024-07-29T14:34:31.382517Z",
     "iopub.status.idle": "2024-07-29T14:34:31.386802Z",
     "shell.execute_reply": "2024-07-29T14:34:31.385970Z"
    },
    "papermill": {
     "duration": 1.410017,
     "end_time": "2024-07-29T14:34:31.388647",
     "exception": false,
     "start_time": "2024-07-29T14:34:29.978630",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.save(\"GPT.keras\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2058,
     "sourceId": 131078,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30616,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 4295.787606,
   "end_time": "2024-07-29T14:34:35.444218",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-29T13:22:59.656612",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
