{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a38b4abf",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:33.727340Z",
     "iopub.status.busy": "2024-07-29T13:22:33.726994Z",
     "iopub.status.idle": "2024-07-29T13:22:45.758613Z",
     "shell.execute_reply": "2024-07-29T13:22:45.757830Z"
    },
    "papermill": {
     "duration": 12.04185,
     "end_time": "2024-07-29T13:22:45.761091",
     "exception": false,
     "start_time": "2024-07-29T13:22:33.719241",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, MultiHeadAttention, Embedding, Add, Dropout, LayerNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import numpy as np\n",
    "import bisect\n",
    "import re\n",
    "import math\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "54daeedc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:45.774481Z",
     "iopub.status.busy": "2024-07-29T13:22:45.773947Z",
     "iopub.status.idle": "2024-07-29T13:22:45.780910Z",
     "shell.execute_reply": "2024-07-29T13:22:45.780031Z"
    },
    "papermill": {
     "duration": 0.015421,
     "end_time": "2024-07-29T13:22:45.782770",
     "exception": false,
     "start_time": "2024-07-29T13:22:45.767349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# My tokenkization\\nfrom nltk.corpus import brown\\n\\nfor file in brown.fileids():\\n    clean_file = re.sub(r\\'/[^\\\\s]+\\', \\' \\', brown.raw(file))\\n    dataset += clean_file + \"\\n\" # Concatenate all the files together\\n\\ndataset = re.sub(r\\'\\\\s+\\', \\' \\', dataset)\\nlen(dataset) # Number of characters\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "# My tokenkization\n",
    "from nltk.corpus import brown\n",
    "\n",
    "for file in brown.fileids():\n",
    "    clean_file = re.sub(r'/[^\\s]+', ' ', brown.raw(file))\n",
    "    dataset += clean_file + \"\\n\" # Concatenate all the files together\n",
    "\n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "len(dataset) # Number of characters\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "021184a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:45.795475Z",
     "iopub.status.busy": "2024-07-29T13:22:45.795183Z",
     "iopub.status.idle": "2024-07-29T13:22:47.249056Z",
     "shell.execute_reply": "2024-07-29T13:22:47.248270Z"
    },
    "papermill": {
     "duration": 1.462825,
     "end_time": "2024-07-29T13:22:47.251426",
     "exception": false,
     "start_time": "2024-07-29T13:22:45.788601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "dataset = \"\"\n",
    "\n",
    "texts = pd.read_csv('/kaggle/input/brown.csv')[\"tokenized_text\"]\n",
    "for text in texts:\n",
    "    dataset += text\n",
    "# Separate the punctuation from the words by a space\n",
    "dataset = re.sub('[^a-zA-Z0-9\\s]+', lambda x: x.group(0)[0] , dataset)    \n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "\n",
    "dataset = dataset.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fc70a43e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:47.264499Z",
     "iopub.status.busy": "2024-07-29T13:22:47.264192Z",
     "iopub.status.idle": "2024-07-29T13:22:47.372136Z",
     "shell.execute_reply": "2024-07-29T13:22:47.371200Z"
    },
    "papermill": {
     "duration": 0.117406,
     "end_time": "2024-07-29T13:22:47.374861",
     "exception": false,
     "start_time": "2024-07-29T13:22:47.257455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61264"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = sorted(set(dataset))\n",
    "vocab_size = len(vocab) + 2\n",
    "vocab_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5531c431",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:47.400255Z",
     "iopub.status.busy": "2024-07-29T13:22:47.399625Z",
     "iopub.status.idle": "2024-07-29T13:22:47.937038Z",
     "shell.execute_reply": "2024-07-29T13:22:47.936132Z"
    },
    "papermill": {
     "duration": 0.547202,
     "end_time": "2024-07-29T13:22:47.939227",
     "exception": false,
     "start_time": "2024-07-29T13:22:47.392025",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "830"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentences = \" \".join(dataset).split(\".\")\n",
    "sentences = [s.split() for s in sentences if len(s.split())>0]\n",
    "max_length = max([len(s) for s in sentences])\n",
    "max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f9ef953f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:47.952834Z",
     "iopub.status.busy": "2024-07-29T13:22:47.952503Z",
     "iopub.status.idle": "2024-07-29T13:22:47.983398Z",
     "shell.execute_reply": "2024-07-29T13:22:47.982357Z"
    },
    "papermill": {
     "duration": 0.039901,
     "end_time": "2024-07-29T13:22:47.985440",
     "exception": false,
     "start_time": "2024-07-29T13:22:47.945539",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.899629529231046 15.372308871704446 118.66599999999744\n"
     ]
    }
   ],
   "source": [
    "lengths = [len(s) for s in sentences]\n",
    "print(np.mean(lengths), np.std(lengths), np.quantile(lengths, .999))\n",
    "\n",
    "# 1 in 1000 sentences exceed 128 so 128 it is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e55f11dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:47.999181Z",
     "iopub.status.busy": "2024-07-29T13:22:47.998878Z",
     "iopub.status.idle": "2024-07-29T13:22:49.845258Z",
     "shell.execute_reply": "2024-07-29T13:22:49.844234Z"
    },
    "papermill": {
     "duration": 1.856051,
     "end_time": "2024-07-29T13:22:49.847694",
     "exception": false,
     "start_time": "2024-07-29T13:22:47.991643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sentence_length = 128 # 2 ** math.ceil(math.log2(max_length)) if we want to\n",
    "# include every sentence. But truncating 1 in 1000 for 8x memory saving seems\n",
    "# obvious.\n",
    "pad_id = 0\n",
    "start_id = 1\n",
    "\n",
    "point = bisect.bisect_left(vocab, '.') + 2\n",
    "dataset = np.zeros((len(sentences),  sentence_length + 1), dtype = np.float32) + pad_id\n",
    "\n",
    "for i, sentence in enumerate(sentences):\n",
    "    dataset[i, :min(len(sentence) + 2, sentence_length + 1)] = np.array([start_id] + [bisect.bisect_left(vocab, word) + 2 for word in sentence][:sentence_length - 1] + [point], dtype = np.float32)\n",
    "\n",
    "vocab = [\"<PAD>\", \"<S>\"] + vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "225fcc7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:49.861387Z",
     "iopub.status.busy": "2024-07-29T13:22:49.861071Z",
     "iopub.status.idle": "2024-07-29T13:22:49.866671Z",
     "shell.execute_reply": "2024-07-29T13:22:49.865832Z"
    },
    "papermill": {
     "duration": 0.014587,
     "end_time": "2024-07-29T13:22:49.868670",
     "exception": false,
     "start_time": "2024-07-29T13:22:49.854083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(tf.keras.Model):\n",
    "    def __init__(self, emb_dim, units):\n",
    "        super().__init__()\n",
    "        self.dense1 = Dense(units, activation = \"relu\")\n",
    "        self.dense2 = Dense(emb_dim)\n",
    "        \n",
    "    def call(self, x):\n",
    "        x = self.dense1(x)\n",
    "        out = self.dense2(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b7b11209",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:49.882058Z",
     "iopub.status.busy": "2024-07-29T13:22:49.881765Z",
     "iopub.status.idle": "2024-07-29T13:22:49.889266Z",
     "shell.execute_reply": "2024-07-29T13:22:49.888431Z"
    },
    "papermill": {
     "duration": 0.016242,
     "end_time": "2024-07-29T13:22:49.891086",
     "exception": false,
     "start_time": "2024-07-29T13:22:49.874844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Decoder(tf.keras.Model):\n",
    "    def __init__(self, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        self.mha = MultiHeadAttention(n_heads, emb_dim//n_heads)\n",
    "        self.dropout1 =  Dropout(dropout)\n",
    "        self.ln1 = LayerNormalization()\n",
    "        \n",
    "        self.ffn = FeedForward(emb_dim, units)\n",
    "        self.dropout2 =  Dropout(dropout)\n",
    "        self.ln2 = LayerNormalization()\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        # Masked multi-head self-attention\n",
    "        # The mask for the padding is problematic to implement here and it's more \n",
    "        # convenient to mask the loss function and we just use the look-ahead mask here.\n",
    "        x1 = self.mha(x, x, x, use_causal_mask = True)\n",
    "        x1 = self.dropout1(x1, training = training)\n",
    "        x = self.ln1(x1 + x)\n",
    "        \n",
    "        x2 = self.ffn(x)\n",
    "        x2 = self.dropout2(x2, training = training)\n",
    "        x = self.ln2(x + x2)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "df50e752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:49.904754Z",
     "iopub.status.busy": "2024-07-29T13:22:49.904082Z",
     "iopub.status.idle": "2024-07-29T13:22:49.911268Z",
     "shell.execute_reply": "2024-07-29T13:22:49.910471Z"
    },
    "papermill": {
     "duration": 0.015943,
     "end_time": "2024-07-29T13:22:49.913082",
     "exception": false,
     "start_time": "2024-07-29T13:22:49.897139",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, vocab_size, sentence_length = 256, n = 6, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        # Embedding layer\n",
    "        self.embedding = Embedding(vocab_size, emb_dim, input_length = sentence_length)\n",
    "        # Positional encoding\n",
    "        self.pos_encode = Add()\n",
    "        self.decoder_stack = [Decoder(n_heads, emb_dim, units, dropout) for _ in range(n)]\n",
    "        self.linear = Dense(vocab_size, activation = tf.nn.log_softmax)\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        \n",
    "        x = self.embedding(x)\n",
    "        x = self.pos_encode([x, pos_encoding])\n",
    "        \n",
    "        for decoder in self.decoder_stack:\n",
    "            x = decoder(x, training)\n",
    "        \n",
    "        out = self.linear(x)\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b47e78d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:49.926439Z",
     "iopub.status.busy": "2024-07-29T13:22:49.925982Z",
     "iopub.status.idle": "2024-07-29T13:22:49.931836Z",
     "shell.execute_reply": "2024-07-29T13:22:49.931056Z"
    },
    "papermill": {
     "duration": 0.014473,
     "end_time": "2024-07-29T13:22:49.933647",
     "exception": false,
     "start_time": "2024-07-29T13:22:49.919174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For a generative model, label smoothing simply hurts perplexity which is what we care \n",
    "# about most. \n",
    "epsilon  = 0.0 # 0.1\n",
    "\n",
    "def masked_loss(label, pred, pad_id = 0):\n",
    "    mask = label != pad_id\n",
    "    \n",
    "    y = tf.one_hot(tf.cast(label, tf.int32), vocab_size, axis = -1)\n",
    "    loss_object = tf.keras.losses.CategoricalCrossentropy(\n",
    "    from_logits=True, reduction='none', label_smoothing = epsilon)\n",
    "    loss = loss_object(y, pred)\n",
    "    \n",
    "    mask = tf.cast(mask, dtype=loss.dtype)\n",
    "    loss *= mask\n",
    "\n",
    "    loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7bece6d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:49.947493Z",
     "iopub.status.busy": "2024-07-29T13:22:49.947252Z",
     "iopub.status.idle": "2024-07-29T13:22:49.954620Z",
     "shell.execute_reply": "2024-07-29T13:22:49.953773Z"
    },
    "papermill": {
     "duration": 0.016095,
     "end_time": "2024-07-29T13:22:49.956544",
     "exception": false,
     "start_time": "2024-07-29T13:22:49.940449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerLearningRateSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, initial_learning_rate, warmup_steps, dtype=tf.float32):\n",
    "        super(TransformerLearningRateSchedule, self).__init__()\n",
    "        self.initial_learning_rate = initial_learning_rate\n",
    "        self.dtype = dtype\n",
    "        self.warmup_steps = tf.cast(warmup_steps, self.dtype)\n",
    "\n",
    "    def __call__(self, step):\n",
    "        step = tf.cast(step, self.dtype)\n",
    "        warmup_steps = tf.cast(self.warmup_steps, self.dtype)\n",
    "        x1 = tf.math.pow(step, tf.constant(-0.5, dtype = self.dtype))\n",
    "        x2 = step * tf.math.pow(self.warmup_steps, tf.constant(-1.5, dtype = self.dtype))\n",
    "        return self.initial_learning_rate * tf.math.minimum(x1, x2)\n",
    "\n",
    "    def get_config(self):\n",
    "        return {\n",
    "            'initial_learning_rate': self.initial_learning_rate,\n",
    "            'warmup_steps': self.warmup_steps,\n",
    "            'dtype': self.dtype\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11b04103",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:49.969692Z",
     "iopub.status.busy": "2024-07-29T13:22:49.969435Z",
     "iopub.status.idle": "2024-07-29T13:22:50.874355Z",
     "shell.execute_reply": "2024-07-29T13:22:50.873601Z"
    },
    "papermill": {
     "duration": 0.913803,
     "end_time": "2024-07-29T13:22:50.876447",
     "exception": false,
     "start_time": "2024-07-29T13:22:49.962644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emb_dim = 512\n",
    "n_heads = 8\n",
    "units = 2048\n",
    "n = 3 # 6\n",
    "dropout = 0.0 # 0.1\n",
    "warmup_steps = 4000\n",
    "#learning_rate = 1e-4\n",
    "# Using a different learning rate than the paper as they train for many more steps.\n",
    "learning_rate_schedule = TransformerLearningRateSchedule(emb_dim**-.5, warmup_steps)\n",
    "optimizer = Adam(learning_rate_schedule, beta_1 = .9, beta_2 = .998, epsilon = 1e-9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ba21e47c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:50.890700Z",
     "iopub.status.busy": "2024-07-29T13:22:50.890400Z",
     "iopub.status.idle": "2024-07-29T13:22:50.901918Z",
     "shell.execute_reply": "2024-07-29T13:22:50.901073Z"
    },
    "papermill": {
     "duration": 0.020598,
     "end_time": "2024-07-29T13:22:50.903768",
     "exception": false,
     "start_time": "2024-07-29T13:22:50.883170",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Positional encoding\n",
    "pos_encoding = np.zeros((sentence_length, emb_dim))\n",
    "pos = np.arange(sentence_length)[:, np.newaxis]\n",
    "even = np.arange(emb_dim, step = 2)[np.newaxis, :]\n",
    "pos_encoding[:, ::2] = np.sin(pos/10**(4*even/emb_dim))\n",
    "pos_encoding[:, 1::2] = np.cos(pos/10**(4*even/emb_dim))\n",
    "pos_encoding = pos_encoding[np.newaxis, :, :] # Adding the batch dimension\n",
    "pos_encoding = tf.cast(pos_encoding, dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f7c0ae8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:50.917041Z",
     "iopub.status.busy": "2024-07-29T13:22:50.916728Z",
     "iopub.status.idle": "2024-07-29T13:22:51.605513Z",
     "shell.execute_reply": "2024-07-29T13:22:51.604595Z"
    },
    "papermill": {
     "duration": 0.697466,
     "end_time": "2024-07-29T13:22:51.607477",
     "exception": false,
     "start_time": "2024-07-29T13:22:50.910011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"transformer\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       multiple                  31367168  \n",
      "                                                                 \n",
      " add (Add)                   multiple                  0         \n",
      "                                                                 \n",
      " decoder (Decoder)           multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_1 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_2 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " dense_6 (Dense)             multiple                  31428432  \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 72252752 (275.62 MB)\n",
      "Trainable params: 72252752 (275.62 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Transformer(vocab_size, sentence_length, n, n_heads, emb_dim, units, dropout)\n",
    "model.compile(optimizer, masked_loss)\n",
    "model.build((None, sentence_length))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c7270f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:22:51.624332Z",
     "iopub.status.busy": "2024-07-29T13:22:51.624019Z",
     "iopub.status.idle": "2024-07-29T13:57:47.646371Z",
     "shell.execute_reply": "2024-07-29T13:57:47.645189Z"
    },
    "papermill": {
     "duration": 2096.033474,
     "end_time": "2024-07-29T13:57:47.648754",
     "exception": false,
     "start_time": "2024-07-29T13:22:51.615280",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "1643/1643 [==============================] - 428s 254ms/step - loss: 7.3383 - val_loss: 6.5197\n",
      "Epoch 2/5\n",
      "1643/1643 [==============================] - 417s 254ms/step - loss: 6.1723 - val_loss: 6.3222\n",
      "Epoch 3/5\n",
      "1643/1643 [==============================] - 417s 254ms/step - loss: 5.8423 - val_loss: 6.2451\n",
      "Epoch 4/5\n",
      "1643/1643 [==============================] - 417s 254ms/step - loss: 5.4702 - val_loss: 6.2374\n",
      "Epoch 5/5\n",
      "1643/1643 [==============================] - 417s 254ms/step - loss: 5.1046 - val_loss: 6.3422\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "epochs = 5\n",
    "\n",
    "# X is simply the expected output shifted to the right with a <S> token at the beginning.\n",
    "history = model.fit(dataset[:, :-1], dataset[:, 1:], batch_size, epochs, validation_split = .05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f97f02fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:57:49.035549Z",
     "iopub.status.busy": "2024-07-29T13:57:49.034659Z",
     "iopub.status.idle": "2024-07-29T13:57:49.331911Z",
     "shell.execute_reply": "2024-07-29T13:57:49.331066Z"
    },
    "papermill": {
     "duration": 0.951508,
     "end_time": "2024-07-29T13:57:49.333924",
     "exception": false,
     "start_time": "2024-07-29T13:57:48.382416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Val Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend(loc='upper right')\n",
    "plt.ylim(6, max(history.history['loss'] + history.history['val_loss']))\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a5356dba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:57:50.690198Z",
     "iopub.status.busy": "2024-07-29T13:57:50.689868Z",
     "iopub.status.idle": "2024-07-29T13:57:50.816518Z",
     "shell.execute_reply": "2024-07-29T13:57:50.815590Z"
    },
    "papermill": {
     "duration": 0.832738,
     "end_time": "2024-07-29T13:57:50.818698",
     "exception": false,
     "start_time": "2024-07-29T13:57:49.985960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Furthermore 0.0004731204535346478\n",
      ", 0.9117166996002197\n",
      "as 0.028292978182435036\n",
      "an 0.0319652259349823\n",
      "encouragement 1.606848672963679e-05\n",
      "to 0.030159763991832733\n",
      "revisionist 0.0021736386697739363\n",
      "thinking 0.002033030381426215\n",
      ", 0.43980005383491516\n",
      "it 0.12052211165428162\n",
      "manifestly 0.0003818988043349236\n",
      "is 0.06130015477538109\n",
      "fair 0.0004186160222161561\n",
      "to 0.3806617856025696\n",
      "admit 0.0017001157393679023\n",
      "that 0.4088858962059021\n",
      "any 0.013419005088508129\n",
      "fraternity 0.0012509911321103573\n",
      "has 0.06376788020133972\n",
      "a 0.02546776458621025\n",
      "constitutional 0.00010875899897655472\n",
      "right 0.00019304534362163395\n",
      "to 0.11199276894330978\n",
      "refuse 0.00041925511322915554\n",
      "to 0.30171170830726624\n",
      "accept 0.008503011427819729\n",
      "persons 0.00015475248801521957\n",
      "it 0.00022589140280615538\n",
      "dislikes 0.00016984119429253042\n",
      ". 0.5958353281021118\n"
     ]
    }
   ],
   "source": [
    "# Examining the 1st example.\n",
    "x = dataset[0]\n",
    "am = tf.nn.softmax(model(tf.reshape(x[:-1], (1, sentence_length))), axis = -1)\n",
    "indices = map(int, x[1:])\n",
    "am = tf.reshape(am, (-1, vocab_size))\n",
    "probs = []\n",
    "for i, idx in enumerate(indices):\n",
    "    if idx == 0:\n",
    "        break\n",
    "    print(vocab[idx], float(am[i, idx]))\n",
    "    probs.append(float(am[i, idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ba73b47c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:57:52.122917Z",
     "iopub.status.busy": "2024-07-29T13:57:52.122399Z",
     "iopub.status.idle": "2024-07-29T13:58:18.264274Z",
     "shell.execute_reply": "2024-07-29T13:58:18.263300Z"
    },
    "papermill": {
     "duration": 26.794743,
     "end_time": "2024-07-29T13:58:18.266345",
     "exception": false,
     "start_time": "2024-07-29T13:57:51.471602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The close of these features , the example of literature , is a tendency to persuade us to the evil policy .\n",
      "The night , a bottle of a man and a vigorous woman spoke in the pool , and on his left .\n",
      "The final unit of the better developed demand of the two possible decades of the Yokel of the river is best ; ;and , and I shall radish , if not even in the place of the people - and I have never heard that I can't get it .\n",
      "As before the day you have visited him on the State of America that you have seen that .\n",
      "He was born in his pajamas to the front of the dust and the truck he knew they were going in the hall .\n",
      "The value of the tax program is the result of a common period for the tax .\n",
      "The tragic post is not yet large for any period of homes .\n",
      "The place and still the woman sighed and went to the door .\n",
      "The big man was struck in the morning of the rock , and he was killed .\n",
      "The subject here is that there is a sound of water , so that is the case to the ` growing ' .\n",
      "It should be a common way for the way to follow the work of God's L .\n",
      "And she was a baffled man , sitting up her in the field .\n",
      "The process of the Dominican Republic is particularly a conception of an intuitive detective .\n",
      "He was still disappointed to say .\n",
      "To her surprise , in the corner of the early light and the other seeds of the board of living , colorful and yellow , and a drink of a family , boats .\n",
      "The patrol wasn't back to the bedroom , and she was no more than a dozen years cruiser .\n",
      "He had little time about the wedding of the evening , which was still one of the most of the most of the most of the most of the most of the most fellow citizens .\n",
      "No wonder he has seen the simple man , the voice of which the Lord , the fatal man who has been killed .\n",
      "He had a long sweater , elaborately , and a surprised man , a little feeling which made him .\n",
      "The former Co .\n",
      "This is a little idea of the ecumenical , which has been done to his name .\n",
      "I was getting up and started to a nice moment of a while .\n",
      "He had taken up by him with a while .\n",
      "He looked up and saw a small brown flannel .\n",
      "The question of this would be a very more latent , if the political is the best possible of the century .\n"
     ]
    }
   ],
   "source": [
    "def softmax(logits, axis = -1):\n",
    "    e = np.exp(logits)\n",
    "    return e/np.sum(e, axis = axis)\n",
    "\n",
    "def sample(n = 10, temperature = .7):\n",
    "    for _ in range(n):\n",
    "        x = np.zeros((sentence_length + 1)) \n",
    "        # The first token is <S> which is irrelevant to the output.\n",
    "        x[0] = 1 # I could've used one-hot but making a sentence with one-hot seems weird. \n",
    "        i = 0\n",
    "        choices = []\n",
    "        choice = 0\n",
    "        indices = list(range(vocab_size))\n",
    "        \n",
    "        while choice != point and i < sentence_length:\n",
    "            out = np.ravel(model(x[:-1].reshape(1, sentence_length))[0, i])\n",
    "            # output shape is (batch_size, sentence_length, vocab_size)\n",
    "            probs = softmax(out / temperature, axis = -1)\n",
    "            choice = np.random.choice(indices, p = probs)\n",
    "            i = i+1\n",
    "            x[i] = choice\n",
    "            choices.append(choice)\n",
    "\n",
    "        sample = \" \".join(map(lambda x : vocab[x], choices))\n",
    "        print(sample)\n",
    "\n",
    "sample(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "573bcf83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-29T13:58:19.623187Z",
     "iopub.status.busy": "2024-07-29T13:58:19.622831Z",
     "iopub.status.idle": "2024-07-29T13:58:19.626801Z",
     "shell.execute_reply": "2024-07-29T13:58:19.625929Z"
    },
    "papermill": {
     "duration": 0.660522,
     "end_time": "2024-07-29T13:58:19.628718",
     "exception": false,
     "start_time": "2024-07-29T13:58:18.968196",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.save(\"GPT.keras\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2058,
     "sourceId": 131078,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30616,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 2152.871069,
   "end_time": "2024-07-29T13:58:23.194017",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-29T13:22:30.322948",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
