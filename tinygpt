{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1ec05d73",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:35.304205Z",
     "iopub.status.busy": "2024-07-28T12:02:35.303337Z",
     "iopub.status.idle": "2024-07-28T12:02:47.461196Z",
     "shell.execute_reply": "2024-07-28T12:02:47.460422Z"
    },
    "papermill": {
     "duration": 12.167324,
     "end_time": "2024-07-28T12:02:47.463657",
     "exception": false,
     "start_time": "2024-07-28T12:02:35.296333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, MultiHeadAttention, Embedding, Add, Dropout, LayerNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import numpy as np\n",
    "import bisect\n",
    "import re\n",
    "import math\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3c63bc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:47.477122Z",
     "iopub.status.busy": "2024-07-28T12:02:47.476636Z",
     "iopub.status.idle": "2024-07-28T12:02:47.483662Z",
     "shell.execute_reply": "2024-07-28T12:02:47.482792Z"
    },
    "papermill": {
     "duration": 0.015496,
     "end_time": "2024-07-28T12:02:47.485501",
     "exception": false,
     "start_time": "2024-07-28T12:02:47.470005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# My tokenkization\\nfrom nltk.corpus import brown\\n\\nfor file in brown.fileids():\\n    clean_file = re.sub(r\\'/[^\\\\s]+\\', \\' \\', brown.raw(file))\\n    dataset += clean_file + \"\\n\" # Concatenate all the files together\\n\\ndataset = re.sub(r\\'\\\\s+\\', \\' \\', dataset)\\nlen(dataset) # Number of characters\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "# My tokenkization\n",
    "from nltk.corpus import brown\n",
    "\n",
    "for file in brown.fileids():\n",
    "    clean_file = re.sub(r'/[^\\s]+', ' ', brown.raw(file))\n",
    "    dataset += clean_file + \"\\n\" # Concatenate all the files together\n",
    "\n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "len(dataset) # Number of characters\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a86ef99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:47.498097Z",
     "iopub.status.busy": "2024-07-28T12:02:47.497851Z",
     "iopub.status.idle": "2024-07-28T12:02:48.948449Z",
     "shell.execute_reply": "2024-07-28T12:02:48.947613Z"
    },
    "papermill": {
     "duration": 1.459491,
     "end_time": "2024-07-28T12:02:48.950783",
     "exception": false,
     "start_time": "2024-07-28T12:02:47.491292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "dataset = \"\"\n",
    "\n",
    "texts = pd.read_csv('/kaggle/input/brown.csv')[\"tokenized_text\"]\n",
    "for text in texts:\n",
    "    dataset += text\n",
    "\n",
    "# Separate the punctuation from the words by a space\n",
    "dataset = re.sub('[^a-zA-Z0-9\\s]+', lambda x: x.group(0)[0] , dataset)    \n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "\n",
    "words = dataset.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4e429b23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:48.964152Z",
     "iopub.status.busy": "2024-07-28T12:02:48.963857Z",
     "iopub.status.idle": "2024-07-28T12:02:49.068453Z",
     "shell.execute_reply": "2024-07-28T12:02:49.067531Z"
    },
    "papermill": {
     "duration": 0.113883,
     "end_time": "2024-07-28T12:02:49.070713",
     "exception": false,
     "start_time": "2024-07-28T12:02:48.956830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61264"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = sorted(set(words))\n",
    "vocab_size = len(vocab) + 2\n",
    "vocab_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f8128076",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:49.096742Z",
     "iopub.status.busy": "2024-07-28T12:02:49.096433Z",
     "iopub.status.idle": "2024-07-28T12:02:49.560298Z",
     "shell.execute_reply": "2024-07-28T12:02:49.559316Z"
    },
    "papermill": {
     "duration": 0.47327,
     "end_time": "2024-07-28T12:02:49.562361",
     "exception": false,
     "start_time": "2024-07-28T12:02:49.089091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(55335, 830)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentences = dataset.split(\".\")\n",
    "sentences = [s.split() for s in sentences if len(s.split())>0]\n",
    "max_length = max([len(s) for s in sentences])\n",
    "len(sentences), max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b9360a46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:49.575986Z",
     "iopub.status.busy": "2024-07-28T12:02:49.575688Z",
     "iopub.status.idle": "2024-07-28T12:02:49.605955Z",
     "shell.execute_reply": "2024-07-28T12:02:49.605013Z"
    },
    "papermill": {
     "duration": 0.039346,
     "end_time": "2024-07-28T12:02:49.607991",
     "exception": false,
     "start_time": "2024-07-28T12:02:49.568645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.899629529231046 15.372308871704446 118.66599999999744\n"
     ]
    }
   ],
   "source": [
    "lengths = [len(s) for s in sentences]\n",
    "print(np.mean(lengths), np.std(lengths), np.quantile(lengths, .999))\n",
    "\n",
    "# 1 in 1000 sentences exceed 128 so 128 it is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "98ccb4fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:49.621388Z",
     "iopub.status.busy": "2024-07-28T12:02:49.621103Z",
     "iopub.status.idle": "2024-07-28T12:02:51.518954Z",
     "shell.execute_reply": "2024-07-28T12:02:51.518192Z"
    },
    "papermill": {
     "duration": 1.907213,
     "end_time": "2024-07-28T12:02:51.521248",
     "exception": false,
     "start_time": "2024-07-28T12:02:49.614035",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sentence_length = 128 # 2 ** math.ceil(math.log2(max_length)) if we want to\n",
    "# include every sentence. But truncating 1 in 1000 for 8x memory saving seems\n",
    "# obvious.\n",
    "pad_id = 0\n",
    "start_id = 1\n",
    "\n",
    "point = bisect.bisect_left(vocab, '.') + 2\n",
    "dataset = np.zeros((len(sentences),  sentence_length + 1), dtype = np.float32) + pad_id\n",
    "\n",
    "for i, sentence in enumerate(sentences):\n",
    "    dataset[i, :min(len(sentence) + 2, sentence_length + 1)] = np.array([start_id] + [bisect.bisect_left(vocab, word) + 2 for word in sentence][:sentence_length - 1] + [point], dtype = np.float32)\n",
    "\n",
    "vocab = [\"<PAD>\", \"<S>\"] + vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7ed28b52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:51.535067Z",
     "iopub.status.busy": "2024-07-28T12:02:51.534781Z",
     "iopub.status.idle": "2024-07-28T12:02:51.540213Z",
     "shell.execute_reply": "2024-07-28T12:02:51.539407Z"
    },
    "papermill": {
     "duration": 0.014365,
     "end_time": "2024-07-28T12:02:51.542126",
     "exception": false,
     "start_time": "2024-07-28T12:02:51.527761",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(tf.keras.Model):\n",
    "    def __init__(self, emb_dim, units):\n",
    "        super().__init__()\n",
    "        self.dense1 = Dense(units, activation = \"relu\")\n",
    "        self.dense2 = Dense(emb_dim)\n",
    "        \n",
    "    def call(self, x):\n",
    "        x = self.dense1(x)\n",
    "        out = self.dense2(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "675f61b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:51.555682Z",
     "iopub.status.busy": "2024-07-28T12:02:51.555005Z",
     "iopub.status.idle": "2024-07-28T12:02:51.562308Z",
     "shell.execute_reply": "2024-07-28T12:02:51.561543Z"
    },
    "papermill": {
     "duration": 0.016056,
     "end_time": "2024-07-28T12:02:51.564219",
     "exception": false,
     "start_time": "2024-07-28T12:02:51.548163",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Decoder(tf.keras.Model):\n",
    "    def __init__(self, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        self.mha = MultiHeadAttention(n_heads, emb_dim//n_heads)\n",
    "        self.dropout1 =  Dropout(dropout)\n",
    "        self.ln1 = LayerNormalization()\n",
    "        \n",
    "        self.ffn = FeedForward(emb_dim, units)\n",
    "        self.dropout2 =  Dropout(dropout)\n",
    "        self.ln2 = LayerNormalization()\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        # Masked multi-head self-attention\n",
    "        # The mask for the padding is problematic to implement here and it's more \n",
    "        # convenient to mask the loss function and we just use the look-ahead mask here.\n",
    "        x1 = self.mha(x, x, x, use_causal_mask = True)\n",
    "        x1 = self.dropout1(x1, training = training)\n",
    "        x = self.ln1(x1 + x)\n",
    "        \n",
    "        x2 = self.ffn(x)\n",
    "        x2 = self.dropout2(x2, training = training)\n",
    "        x = self.ln2(x + x2)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d212846b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:51.577514Z",
     "iopub.status.busy": "2024-07-28T12:02:51.577231Z",
     "iopub.status.idle": "2024-07-28T12:02:51.584218Z",
     "shell.execute_reply": "2024-07-28T12:02:51.583417Z"
    },
    "papermill": {
     "duration": 0.015771,
     "end_time": "2024-07-28T12:02:51.586244",
     "exception": false,
     "start_time": "2024-07-28T12:02:51.570473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, vocab_size, sentence_length = 256, n = 6, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        # Embedding layer\n",
    "        self.embedding = Embedding(vocab_size, emb_dim, input_length = sentence_length)\n",
    "        # Positional encoding\n",
    "        self.pos_encode = Add()\n",
    "        self.decoder_stack = [Decoder(n_heads, emb_dim, units, dropout) for _ in range(n)]\n",
    "        self.linear = Dense(vocab_size, activation = tf.nn.log_softmax)\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        \n",
    "        x = self.embedding(x)\n",
    "        x = self.pos_encode([x, pos_encoding])\n",
    "        \n",
    "        for decoder in self.decoder_stack:\n",
    "            x = decoder(x, training)\n",
    "        \n",
    "        out = self.linear(x)\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "30bb269d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:51.599460Z",
     "iopub.status.busy": "2024-07-28T12:02:51.599034Z",
     "iopub.status.idle": "2024-07-28T12:02:51.605114Z",
     "shell.execute_reply": "2024-07-28T12:02:51.604257Z"
    },
    "papermill": {
     "duration": 0.014685,
     "end_time": "2024-07-28T12:02:51.607011",
     "exception": false,
     "start_time": "2024-07-28T12:02:51.592326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For a generative model, label smoothing simply hurts perplexity which is what we care \n",
    "# about most. \n",
    "# epsilon = 0.0 maybe better\n",
    "\n",
    "def masked_loss(label, pred, pad_id = 0, epsilon = 0.1): \n",
    "    mask = label != pad_id\n",
    "    \n",
    "    y = tf.one_hot(tf.cast(label, tf.int32), vocab_size, axis = -1)\n",
    "    loss_object = tf.keras.losses.CategoricalCrossentropy(\n",
    "    from_logits=True, reduction='none', label_smoothing = epsilon)\n",
    "    loss = loss_object(y, pred)\n",
    "    \n",
    "    mask = tf.cast(mask, dtype=loss.dtype)\n",
    "    loss *= mask\n",
    "\n",
    "    loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8b28cb68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:51.620491Z",
     "iopub.status.busy": "2024-07-28T12:02:51.619842Z",
     "iopub.status.idle": "2024-07-28T12:02:51.625749Z",
     "shell.execute_reply": "2024-07-28T12:02:51.624951Z"
    },
    "papermill": {
     "duration": 0.014579,
     "end_time": "2024-07-28T12:02:51.627621",
     "exception": false,
     "start_time": "2024-07-28T12:02:51.613042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerLearningRateSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, initial_learning_rate, warmup_steps):\n",
    "        self.initial_learning_rate = initial_learning_rate\n",
    "        self.warmup_steps = warmup_steps\n",
    "\n",
    "    def __call__(self, step):\n",
    "        x1 = tf.math.pow(10 / tf.math.sqrt(tf.cast(step, tf.float32)), tf.constant([-0.5]))\n",
    "        x2 =  tf.cast(step, tf.float32) * tf.constant([10 * warmup_steps**-1.5])\n",
    "        return self.initial_learning_rate * tf.math.minimum(x1, x2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "043fff05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:51.641709Z",
     "iopub.status.busy": "2024-07-28T12:02:51.641445Z",
     "iopub.status.idle": "2024-07-28T12:02:52.518029Z",
     "shell.execute_reply": "2024-07-28T12:02:52.517045Z"
    },
    "papermill": {
     "duration": 0.885729,
     "end_time": "2024-07-28T12:02:52.520184",
     "exception": false,
     "start_time": "2024-07-28T12:02:51.634455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emb_dim = 512\n",
    "n_heads = 8\n",
    "units = 2048\n",
    "n = 6\n",
    "dropout = 0.1\n",
    "warmup_steps = 500\n",
    "learning_rate = 1e-3\n",
    "# Using a different learning rate than the paper as they train for many more steps.\n",
    "learning_rate_schedule = TransformerLearningRateSchedule(emb_dim**-.5, warmup_steps)\n",
    "optimizer = Adam(learning_rate_schedule, beta_1 = .9, beta_2 = .998, epsilon = 1e-9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "424ef66a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:52.534254Z",
     "iopub.status.busy": "2024-07-28T12:02:52.533957Z",
     "iopub.status.idle": "2024-07-28T12:02:52.545031Z",
     "shell.execute_reply": "2024-07-28T12:02:52.544316Z"
    },
    "papermill": {
     "duration": 0.020247,
     "end_time": "2024-07-28T12:02:52.546835",
     "exception": false,
     "start_time": "2024-07-28T12:02:52.526588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Positional encoding\n",
    "pos_encoding = np.zeros((sentence_length, emb_dim))\n",
    "pos = np.arange(sentence_length)[:, np.newaxis]\n",
    "even = np.arange(emb_dim, step = 2)[np.newaxis, :]\n",
    "pos_encoding[:, ::2] = np.sin(pos/10**(4*even/emb_dim))\n",
    "pos_encoding[:, 1::2] = np.cos(pos/10**(4*even/emb_dim))\n",
    "pos_encoding = pos_encoding[np.newaxis, :, :] # Adding the batch dimension\n",
    "pos_encoding = tf.cast(pos_encoding, dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7d3888b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:52.559897Z",
     "iopub.status.busy": "2024-07-28T12:02:52.559626Z",
     "iopub.status.idle": "2024-07-28T12:02:53.665294Z",
     "shell.execute_reply": "2024-07-28T12:02:53.664453Z"
    },
    "papermill": {
     "duration": 1.114946,
     "end_time": "2024-07-28T12:02:53.667743",
     "exception": false,
     "start_time": "2024-07-28T12:02:52.552797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"transformer\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       multiple                  31367168  \n",
      "                                                                 \n",
      " add (Add)                   multiple                  0         \n",
      "                                                                 \n",
      " decoder (Decoder)           multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_1 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_2 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_3 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_4 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_5 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " dense_12 (Dense)            multiple                  31428432  \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 81709904 (311.70 MB)\n",
      "Trainable params: 81709904 (311.70 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Transformer(vocab_size, sentence_length, n, n_heads, emb_dim, units, dropout)\n",
    "model.compile(optimizer, masked_loss)\n",
    "model.build((None, sentence_length))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f4411497",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T12:02:53.685654Z",
     "iopub.status.busy": "2024-07-28T12:02:53.684997Z",
     "iopub.status.idle": "2024-07-28T13:30:40.125333Z",
     "shell.execute_reply": "2024-07-28T13:30:40.124351Z"
    },
    "papermill": {
     "duration": 5267.779352,
     "end_time": "2024-07-28T13:30:41.455397",
     "exception": false,
     "start_time": "2024-07-28T12:02:53.676045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1643/1643 [==============================] - 542s 318ms/step - loss: 7.9207 - val_loss: 7.9655\n",
      "Epoch 2/10\n",
      "1643/1643 [==============================] - 523s 318ms/step - loss: 14.9963 - val_loss: 8.0162\n",
      "Epoch 3/10\n",
      "1643/1643 [==============================] - 525s 319ms/step - loss: 63.1838 - val_loss: 81.3792\n",
      "Epoch 4/10\n",
      "1643/1643 [==============================] - 526s 320ms/step - loss: 91.7572 - val_loss: 86.7375\n",
      "Epoch 5/10\n",
      "1643/1643 [==============================] - 525s 320ms/step - loss: 145.8544 - val_loss: 215.2354\n",
      "Epoch 6/10\n",
      "1643/1643 [==============================] - 525s 320ms/step - loss: 200.2718 - val_loss: 196.3005\n",
      "Epoch 7/10\n",
      "1643/1643 [==============================] - 525s 320ms/step - loss: 241.8018 - val_loss: 293.8884\n",
      "Epoch 8/10\n",
      "1643/1643 [==============================] - 525s 320ms/step - loss: 295.9673 - val_loss: 300.2769\n",
      "Epoch 9/10\n",
      "1643/1643 [==============================] - 525s 320ms/step - loss: 344.1374 - val_loss: 313.8502\n",
      "Epoch 10/10\n",
      "1643/1643 [==============================] - 525s 320ms/step - loss: 388.8161 - val_loss: 378.3717\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "epochs = 10\n",
    "\n",
    "# X is simply the expected output shifted to the right with a <S> token at the beginning.\n",
    "history = model.fit(dataset[:, :-1], dataset[:, 1:], batch_size, epochs, validation_split = .05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3440d828",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T13:30:44.247760Z",
     "iopub.status.busy": "2024-07-28T13:30:44.247321Z",
     "iopub.status.idle": "2024-07-28T13:30:44.640522Z",
     "shell.execute_reply": "2024-07-28T13:30:44.639567Z"
    },
    "papermill": {
     "duration": 1.743489,
     "end_time": "2024-07-28T13:30:44.642529",
     "exception": false,
     "start_time": "2024-07-28T13:30:42.899040",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot training & validation loss values\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Val Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.ylim(0, max(history.history['loss'] + history.history['val_loss']))\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cf2ff79a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T13:30:47.425093Z",
     "iopub.status.busy": "2024-07-28T13:30:47.424721Z",
     "iopub.status.idle": "2024-07-28T13:30:47.612828Z",
     "shell.execute_reply": "2024-07-28T13:30:47.611879Z"
    },
    "papermill": {
     "duration": 1.554485,
     "end_time": "2024-07-28T13:30:47.615000",
     "exception": false,
     "start_time": "2024-07-28T13:30:46.060515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Furthermore 0.0\n",
      ", 2.0025988313921057e-14\n",
      "as 0.0\n",
      "an 0.0\n",
      "encouragement 0.0\n",
      "to 0.0\n",
      "revisionist 0.0\n",
      "thinking 0.0\n",
      ", 2.0025988313921057e-14\n",
      "it 0.0\n",
      "manifestly 0.0\n",
      "is 0.0\n",
      "fair 0.0\n",
      "to 0.0\n",
      "admit 0.0\n",
      "that 0.0\n",
      "any 0.0\n",
      "fraternity 0.0\n",
      "has 0.0\n",
      "a 0.0\n",
      "constitutional 0.0\n",
      "right 0.0\n",
      "to 0.0\n",
      "refuse 0.0\n",
      "to 0.0\n",
      "accept 0.0\n",
      "persons 0.0\n",
      "it 0.0\n",
      "dislikes 0.0\n",
      ". 0.0\n"
     ]
    }
   ],
   "source": [
    "# Examining the 1st example.\n",
    "x = dataset[0]\n",
    "am = tf.nn.softmax(model(tf.reshape(x[:-1], (1, sentence_length))), axis = -1)\n",
    "indices = map(int, x[1:])\n",
    "am = tf.reshape(am, (-1, vocab_size))\n",
    "probs = []\n",
    "for i, idx in enumerate(indices):\n",
    "    if idx == 0:\n",
    "        break\n",
    "    print(vocab[idx], float(am[i, idx]))\n",
    "    probs.append(float(am[i, idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fcf9ccf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T13:30:50.398078Z",
     "iopub.status.busy": "2024-07-28T13:30:50.397645Z",
     "iopub.status.idle": "2024-07-28T13:36:32.513522Z",
     "shell.execute_reply": "2024-07-28T13:36:32.512270Z"
    },
    "papermill": {
     "duration": 343.480595,
     "end_time": "2024-07-28T13:36:32.515587",
     "exception": false,
     "start_time": "2024-07-28T13:30:49.034992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Chinese .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Chinese .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Chinese .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Chinese .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n",
      ".Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface .Surface\n"
     ]
    }
   ],
   "source": [
    "def softmax(logits, axis = -1):\n",
    "    e = np.exp(logits)\n",
    "    return e/np.sum(e, axis = axis)\n",
    "\n",
    "def sample(n = 10, temperature = .7):\n",
    "    for _ in range(n):\n",
    "        x = np.zeros((sentence_length + 1)) \n",
    "        # The first token is <S> which is irrelevant to the output.\n",
    "        x[0] = 1 # I could've used one-hot but making a sentence with one-hot seems weird. \n",
    "        i = 0\n",
    "        choices = []\n",
    "        choice = 0\n",
    "        indices = list(range(vocab_size))\n",
    "        \n",
    "        while choice != point and i < sentence_length:\n",
    "            out = np.ravel(model(x[:-1].reshape(1, sentence_length))[0, i])\n",
    "            # output shape is (batch_size, sentence_length, vocab_size)\n",
    "            probs = softmax(out / temperature, axis = -1)\n",
    "            choice = np.random.choice(indices, p = probs)\n",
    "            i = i+1\n",
    "            x[i] = choice\n",
    "            choices.append(choice)\n",
    "\n",
    "        sample = \" \".join(map(lambda x : vocab[x], choices))\n",
    "        print(sample)\n",
    "\n",
    "sample(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "786cfee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T13:36:35.295804Z",
     "iopub.status.busy": "2024-07-28T13:36:35.295028Z",
     "iopub.status.idle": "2024-07-28T13:36:35.299437Z",
     "shell.execute_reply": "2024-07-28T13:36:35.298495Z"
    },
    "papermill": {
     "duration": 1.413311,
     "end_time": "2024-07-28T13:36:35.301421",
     "exception": false,
     "start_time": "2024-07-28T13:36:33.888110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.save(\"GPT.keras\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2058,
     "sourceId": 131078,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30616,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5648.161798,
   "end_time": "2024-07-28T13:36:40.107498",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-28T12:02:31.945700",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
