{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "df27a636",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:22.086824Z",
     "iopub.status.busy": "2024-07-28T15:01:22.086144Z",
     "iopub.status.idle": "2024-07-28T15:01:34.190241Z",
     "shell.execute_reply": "2024-07-28T15:01:34.189247Z"
    },
    "papermill": {
     "duration": 12.114065,
     "end_time": "2024-07-28T15:01:34.192607",
     "exception": false,
     "start_time": "2024-07-28T15:01:22.078542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.3\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Dense, MultiHeadAttention, Embedding, Add, Dropout, LayerNormalization\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import numpy as np\n",
    "import bisect\n",
    "import re\n",
    "import math\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b85e4692",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:34.206631Z",
     "iopub.status.busy": "2024-07-28T15:01:34.206085Z",
     "iopub.status.idle": "2024-07-28T15:01:34.212940Z",
     "shell.execute_reply": "2024-07-28T15:01:34.212147Z"
    },
    "papermill": {
     "duration": 0.015989,
     "end_time": "2024-07-28T15:01:34.214884",
     "exception": false,
     "start_time": "2024-07-28T15:01:34.198895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# My tokenkization\\nfrom nltk.corpus import brown\\n\\nfor file in brown.fileids():\\n    clean_file = re.sub(r\\'/[^\\\\s]+\\', \\' \\', brown.raw(file))\\n    dataset += clean_file + \"\\n\" # Concatenate all the files together\\n\\ndataset = re.sub(r\\'\\\\s+\\', \\' \\', dataset)\\nlen(dataset) # Number of characters\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "# My tokenkization\n",
    "from nltk.corpus import brown\n",
    "\n",
    "for file in brown.fileids():\n",
    "    clean_file = re.sub(r'/[^\\s]+', ' ', brown.raw(file))\n",
    "    dataset += clean_file + \"\\n\" # Concatenate all the files together\n",
    "\n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "len(dataset) # Number of characters\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "433bef4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:34.228118Z",
     "iopub.status.busy": "2024-07-28T15:01:34.227777Z",
     "iopub.status.idle": "2024-07-28T15:01:35.686820Z",
     "shell.execute_reply": "2024-07-28T15:01:35.686030Z"
    },
    "papermill": {
     "duration": 1.468243,
     "end_time": "2024-07-28T15:01:35.689073",
     "exception": false,
     "start_time": "2024-07-28T15:01:34.220830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "dataset = \"\"\n",
    "\n",
    "texts = pd.read_csv('/kaggle/input/brown.csv')[\"tokenized_text\"]\n",
    "for text in texts:\n",
    "    dataset += text\n",
    "# Separate the punctuation from the words by a space\n",
    "dataset = re.sub('[^a-zA-Z0-9\\s]+', lambda x: x.group(0)[0] , dataset)    \n",
    "dataset = re.sub(r'\\s+', ' ', dataset)\n",
    "\n",
    "dataset = dataset.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aabf75ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:35.705505Z",
     "iopub.status.busy": "2024-07-28T15:01:35.705202Z",
     "iopub.status.idle": "2024-07-28T15:01:35.809365Z",
     "shell.execute_reply": "2024-07-28T15:01:35.808459Z"
    },
    "papermill": {
     "duration": 0.114815,
     "end_time": "2024-07-28T15:01:35.811908",
     "exception": false,
     "start_time": "2024-07-28T15:01:35.697093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61264"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vocab = sorted(set(dataset))\n",
    "vocab_size = len(vocab) + 2\n",
    "vocab_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e62349ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:35.836570Z",
     "iopub.status.busy": "2024-07-28T15:01:35.836243Z",
     "iopub.status.idle": "2024-07-28T15:01:36.350279Z",
     "shell.execute_reply": "2024-07-28T15:01:36.349324Z"
    },
    "papermill": {
     "duration": 0.523438,
     "end_time": "2024-07-28T15:01:36.352408",
     "exception": false,
     "start_time": "2024-07-28T15:01:35.828970",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "830"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sentences = \" \".join(dataset).split(\".\")\n",
    "sentences = [s.split() for s in sentences if len(s.split())>0]\n",
    "max_length = max([len(s) for s in sentences])\n",
    "max_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cd5d5137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:36.366305Z",
     "iopub.status.busy": "2024-07-28T15:01:36.366014Z",
     "iopub.status.idle": "2024-07-28T15:01:36.395699Z",
     "shell.execute_reply": "2024-07-28T15:01:36.394849Z"
    },
    "papermill": {
     "duration": 0.038662,
     "end_time": "2024-07-28T15:01:36.397471",
     "exception": false,
     "start_time": "2024-07-28T15:01:36.358809",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.899629529231046 15.372308871704446 118.66599999999744\n"
     ]
    }
   ],
   "source": [
    "lengths = [len(s) for s in sentences]\n",
    "print(np.mean(lengths), np.std(lengths), np.quantile(lengths, .999))\n",
    "\n",
    "# 1 in 1000 sentences exceed 128 so 128 it is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2994e283",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:36.411244Z",
     "iopub.status.busy": "2024-07-28T15:01:36.410949Z",
     "iopub.status.idle": "2024-07-28T15:01:38.228088Z",
     "shell.execute_reply": "2024-07-28T15:01:38.227301Z"
    },
    "papermill": {
     "duration": 1.826757,
     "end_time": "2024-07-28T15:01:38.230606",
     "exception": false,
     "start_time": "2024-07-28T15:01:36.403849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sentence_length = 128 # 2 ** math.ceil(math.log2(max_length)) if we want to\n",
    "# include every sentence. But truncating 1 in 1000 for 8x memory saving seems\n",
    "# obvious.\n",
    "pad_id = 0\n",
    "start_id = 1\n",
    "\n",
    "point = bisect.bisect_left(vocab, '.') + 2\n",
    "dataset = np.zeros((len(sentences),  sentence_length + 1), dtype = np.float32) + pad_id\n",
    "\n",
    "for i, sentence in enumerate(sentences):\n",
    "    dataset[i, :min(len(sentence) + 2, sentence_length + 1)] = np.array([start_id] + [bisect.bisect_left(vocab, word) + 2 for word in sentence][:sentence_length - 1] + [point], dtype = np.float32)\n",
    "\n",
    "vocab = [\"<PAD>\", \"<S>\"] + vocab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3e421224",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:38.244926Z",
     "iopub.status.busy": "2024-07-28T15:01:38.244619Z",
     "iopub.status.idle": "2024-07-28T15:01:38.250055Z",
     "shell.execute_reply": "2024-07-28T15:01:38.249177Z"
    },
    "papermill": {
     "duration": 0.014827,
     "end_time": "2024-07-28T15:01:38.252058",
     "exception": false,
     "start_time": "2024-07-28T15:01:38.237231",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FeedForward(tf.keras.Model):\n",
    "    def __init__(self, emb_dim, units):\n",
    "        super().__init__()\n",
    "        self.dense1 = Dense(units, activation = \"relu\")\n",
    "        self.dense2 = Dense(emb_dim)\n",
    "        \n",
    "    def call(self, x):\n",
    "        x = self.dense1(x)\n",
    "        out = self.dense2(x)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e4f09ca3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:38.266127Z",
     "iopub.status.busy": "2024-07-28T15:01:38.265646Z",
     "iopub.status.idle": "2024-07-28T15:01:38.273136Z",
     "shell.execute_reply": "2024-07-28T15:01:38.272283Z"
    },
    "papermill": {
     "duration": 0.016694,
     "end_time": "2024-07-28T15:01:38.275039",
     "exception": false,
     "start_time": "2024-07-28T15:01:38.258345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Decoder(tf.keras.Model):\n",
    "    def __init__(self, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        self.mha = MultiHeadAttention(n_heads, emb_dim//n_heads)\n",
    "        self.dropout1 =  Dropout(dropout)\n",
    "        self.ln1 = LayerNormalization()\n",
    "        \n",
    "        self.ffn = FeedForward(emb_dim, units)\n",
    "        self.dropout2 =  Dropout(dropout)\n",
    "        self.ln2 = LayerNormalization()\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        # Masked multi-head self-attention\n",
    "        # The mask for the padding is problematic to implement here and it's more \n",
    "        # convenient to mask the loss function and we just use the look-ahead mask here.\n",
    "        x1 = self.mha(x, x, x, use_causal_mask = True)\n",
    "        x1 = self.dropout1(x1, training = training)\n",
    "        x = self.ln1(x1 + x)\n",
    "        \n",
    "        x2 = self.ffn(x)\n",
    "        x2 = self.dropout2(x2, training = training)\n",
    "        x = self.ln2(x + x2)\n",
    "        \n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4900d767",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:38.288946Z",
     "iopub.status.busy": "2024-07-28T15:01:38.288636Z",
     "iopub.status.idle": "2024-07-28T15:01:38.296140Z",
     "shell.execute_reply": "2024-07-28T15:01:38.295310Z"
    },
    "papermill": {
     "duration": 0.01673,
     "end_time": "2024-07-28T15:01:38.298053",
     "exception": false,
     "start_time": "2024-07-28T15:01:38.281323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Transformer(tf.keras.Model):\n",
    "    def __init__(self, vocab_size, sentence_length = 256, n = 6, n_heads = 8, emb_dim = 512, units = 2048, dropout = .1):\n",
    "        super().__init__()\n",
    "        # Embedding layer\n",
    "        self.embedding = Embedding(vocab_size, emb_dim, input_length = sentence_length)\n",
    "        # Positional encoding\n",
    "        self.pos_encode = Add()\n",
    "        self.decoder_stack = [Decoder(n_heads, emb_dim, units, dropout) for _ in range(n)]\n",
    "        self.linear = Dense(vocab_size, activation = tf.nn.log_softmax)\n",
    "        \n",
    "    def call(self, x, training):\n",
    "        \n",
    "        x = self.embedding(x)\n",
    "        x = self.pos_encode([x, pos_encoding])\n",
    "        \n",
    "        for decoder in self.decoder_stack:\n",
    "            x = decoder(x, training)\n",
    "        \n",
    "        out = self.linear(x)\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f818d0c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:38.312941Z",
     "iopub.status.busy": "2024-07-28T15:01:38.312688Z",
     "iopub.status.idle": "2024-07-28T15:01:38.318494Z",
     "shell.execute_reply": "2024-07-28T15:01:38.317693Z"
    },
    "papermill": {
     "duration": 0.015663,
     "end_time": "2024-07-28T15:01:38.320341",
     "exception": false,
     "start_time": "2024-07-28T15:01:38.304678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# For a generative model, label smoothing simply hurts perplexity which is what we care \n",
    "# about most. \n",
    "epsilon  = 0.1\n",
    "\n",
    "def masked_loss(label, pred, pad_id = 0):\n",
    "    mask = label != pad_id\n",
    "    \n",
    "    y = tf.one_hot(tf.cast(label, tf.int32), vocab_size, axis = -1)\n",
    "    loss_object = tf.keras.losses.CategoricalCrossentropy(\n",
    "    from_logits=True, reduction='none', label_smoothing = epsilon)\n",
    "    loss = loss_object(y, pred)\n",
    "    \n",
    "    mask = tf.cast(mask, dtype=loss.dtype)\n",
    "    loss *= mask\n",
    "\n",
    "    loss = tf.reduce_sum(loss)/tf.reduce_sum(mask)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8ec9cf3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:38.334136Z",
     "iopub.status.busy": "2024-07-28T15:01:38.333600Z",
     "iopub.status.idle": "2024-07-28T15:01:38.339678Z",
     "shell.execute_reply": "2024-07-28T15:01:38.338929Z"
    },
    "papermill": {
     "duration": 0.014929,
     "end_time": "2024-07-28T15:01:38.341502",
     "exception": false,
     "start_time": "2024-07-28T15:01:38.326573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TransformerLearningRateSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
    "    def __init__(self, initial_learning_rate, warmup_steps):\n",
    "        self.initial_learning_rate = initial_learning_rate\n",
    "        self.warmup_steps = warmup_steps\n",
    "\n",
    "    def __call__(self, step):\n",
    "        x1 = tf.math.pow(10 / tf.math.sqrt(tf.cast(step, tf.float32)), tf.constant([-0.5]))\n",
    "        x2 =  tf.cast(step, tf.float32) * tf.constant([10 * warmup_steps**-1.5])\n",
    "        return self.initial_learning_rate * tf.math.minimum(x1, x2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "00339298",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:38.354895Z",
     "iopub.status.busy": "2024-07-28T15:01:38.354618Z",
     "iopub.status.idle": "2024-07-28T15:01:39.235641Z",
     "shell.execute_reply": "2024-07-28T15:01:39.234571Z"
    },
    "papermill": {
     "duration": 0.890078,
     "end_time": "2024-07-28T15:01:39.237745",
     "exception": false,
     "start_time": "2024-07-28T15:01:38.347667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "emb_dim = 512\n",
    "n_heads = 8\n",
    "units = 2048\n",
    "n = 6\n",
    "dropout = 0.1\n",
    "# warmup_steps = 1000\n",
    "learning_rate = 1e-3\n",
    "# Using a different learning rate than the paper as they train for many more steps.\n",
    "#learning_rate_schedule = TransformerLearningRateSchedule(emb_dim**-.5, warmup_steps)\n",
    "optimizer = Adam(learning_rate, beta_1 = .9, beta_2 = .998, epsilon = 1e-9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "615122bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:39.252966Z",
     "iopub.status.busy": "2024-07-28T15:01:39.252685Z",
     "iopub.status.idle": "2024-07-28T15:01:39.268212Z",
     "shell.execute_reply": "2024-07-28T15:01:39.267285Z"
    },
    "papermill": {
     "duration": 0.025487,
     "end_time": "2024-07-28T15:01:39.270094",
     "exception": false,
     "start_time": "2024-07-28T15:01:39.244607",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Positional encoding\n",
    "pos_encoding = np.zeros((sentence_length, emb_dim))\n",
    "pos = np.arange(sentence_length)[:, np.newaxis]\n",
    "even = np.arange(emb_dim, step = 2)[np.newaxis, :]\n",
    "pos_encoding[:, ::2] = np.sin(pos/10**(4*even/emb_dim))\n",
    "pos_encoding[:, 1::2] = np.cos(pos/10**(4*even/emb_dim))\n",
    "pos_encoding = pos_encoding[np.newaxis, :, :] # Adding the batch dimension\n",
    "pos_encoding = tf.cast(pos_encoding, dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3149f573",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:39.283923Z",
     "iopub.status.busy": "2024-07-28T15:01:39.283622Z",
     "iopub.status.idle": "2024-07-28T15:01:40.393224Z",
     "shell.execute_reply": "2024-07-28T15:01:40.392281Z"
    },
    "papermill": {
     "duration": 1.118802,
     "end_time": "2024-07-28T15:01:40.395231",
     "exception": false,
     "start_time": "2024-07-28T15:01:39.276429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"transformer\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       multiple                  31367168  \n",
      "                                                                 \n",
      " add (Add)                   multiple                  0         \n",
      "                                                                 \n",
      " decoder (Decoder)           multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_1 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_2 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_3 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_4 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " decoder_5 (Decoder)         multiple                  3152384   \n",
      "                                                                 \n",
      " dense_12 (Dense)            multiple                  31428432  \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 81709904 (311.70 MB)\n",
      "Trainable params: 81709904 (311.70 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Transformer(vocab_size, sentence_length, n, n_heads, emb_dim, units, dropout)\n",
    "model.compile(optimizer, masked_loss)\n",
    "model.build((None, sentence_length))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4993846e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:01:40.413482Z",
     "iopub.status.busy": "2024-07-28T15:01:40.413192Z",
     "iopub.status.idle": "2024-07-28T15:28:02.989025Z",
     "shell.execute_reply": "2024-07-28T15:28:02.988068Z"
    },
    "papermill": {
     "duration": 1582.972416,
     "end_time": "2024-07-28T15:28:03.376256",
     "exception": false,
     "start_time": "2024-07-28T15:01:40.403840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3\n",
      "1643/1643 [==============================] - 541s 318ms/step - loss: 7.7765 - val_loss: 10.5740\n",
      "Epoch 2/3\n",
      "1643/1643 [==============================] - 521s 317ms/step - loss: 7.6394 - val_loss: 10.4238\n",
      "Epoch 3/3\n",
      "1643/1643 [==============================] - 521s 317ms/step - loss: 7.6230 - val_loss: 10.2525\n"
     ]
    }
   ],
   "source": [
    "batch_size = 32\n",
    "epochs = 3\n",
    "\n",
    "# X is simply the expected output shifted to the right with a <S> token at the beginning.\n",
    "history = model.fit(dataset[:, :-1], dataset[:, 1:], batch_size, epochs, validation_split = .05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "139d0e8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:28:04.155928Z",
     "iopub.status.busy": "2024-07-28T15:28:04.155543Z",
     "iopub.status.idle": "2024-07-28T15:28:04.540717Z",
     "shell.execute_reply": "2024-07-28T15:28:04.539866Z"
    },
    "papermill": {
     "duration": 0.778257,
     "end_time": "2024-07-28T15:28:04.542749",
     "exception": false,
     "start_time": "2024-07-28T15:28:03.764492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Val Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend(loc='upper right')\n",
    "plt.ylim(0, max(history.history['loss'] + history.history['val_loss']))\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "af112184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:28:05.370276Z",
     "iopub.status.busy": "2024-07-28T15:28:05.369888Z",
     "iopub.status.idle": "2024-07-28T15:28:05.545125Z",
     "shell.execute_reply": "2024-07-28T15:28:05.544242Z"
    },
    "papermill": {
     "duration": 0.615929,
     "end_time": "2024-07-28T15:28:05.547341",
     "exception": false,
     "start_time": "2024-07-28T15:28:04.931412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Furthermore 0.0008294977596960962\n",
      ", 0.006127688102424145\n",
      "as 6.960728933336213e-05\n",
      "an 5.837332355440594e-05\n",
      "encouragement 2.62151297647506e-06\n",
      "to 0.00023054225312080234\n",
      "revisionist 1.338953211416083e-06\n",
      "thinking 6.111992206569994e-06\n",
      ", 0.006127696484327316\n",
      "it 0.00010067726543638855\n",
      "manifestly 2.2982026166573633e-06\n",
      "is 0.0003289782616775483\n",
      "fair 2.8721126454911428e-06\n",
      "to 0.00023054229677654803\n",
      "admit 2.7931657768931473e-06\n",
      "that 5.3558815125143155e-05\n",
      "any 3.1064566428540275e-05\n",
      "fraternity 1.4567207244908786e-06\n",
      "has 0.0001404856302542612\n",
      "a 0.00014548191393259913\n",
      "constitutional 2.6606876417645253e-06\n",
      "right 2.3691907699685544e-05\n",
      "to 0.00023054229677654803\n",
      "refuse 4.202745913062245e-06\n",
      "to 0.00023054232588037848\n",
      "accept 4.212816747894976e-06\n",
      "persons 1.0321157787984703e-05\n",
      "it 0.0001006772872642614\n",
      "dislikes 1.6629802530587767e-06\n",
      ". 0.0003429400676395744\n"
     ]
    }
   ],
   "source": [
    "# Examining the 1st example.\n",
    "x = dataset[0]\n",
    "am = tf.nn.softmax(model(tf.reshape(x[:-1], (1, sentence_length))), axis = -1)\n",
    "indices = map(int, x[1:])\n",
    "am = tf.reshape(am, (-1, vocab_size))\n",
    "probs = []\n",
    "for i, idx in enumerate(indices):\n",
    "    if idx == 0:\n",
    "        break\n",
    "    print(vocab[idx], float(am[i, idx]))\n",
    "    probs.append(float(am[i, idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "57970222",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:28:06.351724Z",
     "iopub.status.busy": "2024-07-28T15:28:06.351353Z",
     "iopub.status.idle": "2024-07-28T15:33:14.955777Z",
     "shell.execute_reply": "2024-07-28T15:33:14.954732Z"
    },
    "papermill": {
     "duration": 308.997595,
     "end_time": "2024-07-28T15:33:14.957991",
     "exception": false,
     "start_time": "2024-07-28T15:28:05.960396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I He The The For Y It Oh And In He The He The When The The The For The Mercer In Richard's It She of He At He He With But It They He She In I The He He I'll He I The He He For There On The The He The The He Kennedy In Through The Dartmouth The The The It The He She More And But If He In It's She The Last I And He The He The It The Almost The But He Why The The He If Amy But A The The He They The I The This And The See It One He I This It He The He He The The I But It The The I But\n",
      "It The He He Our One The Finally In But This He Institut The I The I He A The The The The And She The In In She The When I After You It The H At The He The She It In She She I He The The One The The The The In The If If I The It They A The To The He The I Then The She A It If Peter Little The It , He As It They Gavin's It The The But The I So The The In The This There I He The He The S The The The The The For He According It A I He The I He But The She R The The In But\n",
      "The The He But If The Actually In The I In Then This It The To I He The The I Pesce The It He A Selkirk The In The This I His The He But All The He The But But I He His The It One The I He A It My The It The It I m*ym The Her Matamoras It The It I The A If The He It He There For The The The , The The I The He He She In He In During But The They The To They The There I The He This You'll The The He With The The The Then It The A The The But He The The But The He It The I The\n",
      "He He I The This So By The Many But If In He The According The The I So The I He He But Because The In But He But Institut I She The He Kennedy He He But In The By The He The An His The Then He The The It Such But He The The , But This But He He The The By The Recherche The In I He And He He The The I The The In A But , He The In The Of A The It The The He And There An The They 1 Under The The For If He The I The It In As The Such Memorial He As The He She The With Somehow But And The\n",
      "My I In It He The He It The For He He This A He Lubell Even Haney The Do She We When Peck His For The The If The The They Multnomah With , , He The We The A I I He The A But The The He The His The She It He He The Then But The That's We She I I She But Mrs At She Another It It The It He I But The He The In The He The The He In The The He I He But It But But The The For The The No The Without The He The He He Turnkey It The The Ironpants It A The The These She It Unfortunately There The They He\n",
      "The He The The The He The A The There He The The I He But The But He It It perish He For He His But The He I After At The He The Precious It The But The The It Then A He The There She The The The He He A It They The She The In He It The The The The Mr. On The As The The He No At But It This But They He The But , He It The The By He He The In He He You A He That The The The If I He He The The The The The It It He The The But The In It It A The The I He There It\n",
      "In But In There To A C He ? But No He Again Not The The This The The He The After The This I It The The The I The A D , All The The The The As The C In The He She In I Institut It The The They The There It She He She At The In He They The We The They He I 2 The The In And It There The He A He Maybe He There He The I Gas He The There The No A The The When It I The They One Board The There The It We The The I He Mrs But The I The This The The The The The I He He The He\n",
      "I Miss We The He But The It The She The I The It And The Both He The And The It Othon They He He And It He M The So The It The It The He It It I For In The This The But He For He All By I The The In He The And The The You At He In And It The He I The But S The The He It Then He He But I'd He Is escapist The The She If He He The The The Not Mrs There But As and , The He Richard's She The I The There Although For For The These The And Will Before In Once In The The It He He His You\n",
      "The I The The The A Thomas The I In When In It When The He At The The But The The He At He The The Indeed The It And He The Each It The I I The The When She The The We're Sherman I He When I modern It This The The The Mrs He After The The And In A This Still The A Skyros It He I The The The It But The The The But She One He The The The I The It For It The The He The The Yet He A Don't The D This S The The In You The The He The Now The He And The It He On The Yes Whom In He I They\n",
      "She Some It The He In How How Again They She A When The In He So The Mrs We This The Institut The The All The The The Mr. As The Mr. Therefore He In The Even They He Teter It His The He This The The He The And The His He Skyros There The I've The He This He The Some The The This He there But He It But There He The The The As He But He Or The She There Well But He's The Without In But Is He If The These The I A The The It It I To The But The The He He He Then I On The This In The It Who The I The L Henderson\n",
      "In The And The This Mrs A For He A He She The This Through He The This I But He The I Mr. The The Institut Their The In The The She It In The I The This He And The The But The The I The Today The fact The During The Both In That The But But The It He He He And The The The The It We The The This The He The He They A It The N He When Sixteenth No The The The The She The The At This She The The The If There The There He The The A It This There It But If As He It The The The The This I My 8 A The\n",
      "The You It She When This On The He Another He Then The The 1 The He If The But He The The The But If Once I I H The My We I The When The They He Not The If Morgan For Mrs And The Truman The The This On In The A Waddell The If But The His He His The The The The If One And Outside If He This The , He The The One The He For She The At The It It After The He He C The The He It He It It He The The On He He The No Mommy He I Watson He She The He I These A I He The He Now The In Even\n",
      "The He The The A The The One Andrei I Don't It Morgan It It and A It The With He We His He There A He The There It If She He The He The The The But He This The The What The The The In I Here I In It The The They She Thus The But They This Ore. I The I , She The He In Nothing The The The It There The He He I A The Since For The He The This The The She The The And He Then I His The I Well Therefore And Thus The She The The The The That They My The He But The The He The This The The The The The We\n",
      "The In The The His In He A He The But The The He Morse Mr. The The For In She Certainly The I The He's They Use Responsibility It I He Then The The Henderson And But His He The And Why I The The It He I She The He When The The The But long The They He It The Watson But No The It The The The There The The The The Everything The The The The He If There The This The I Certainly But The The The The No He In I It Another Cox The Much The The She The In He He Finally It The The The In The The The The When I She The Resolves But I He\n",
      "It There The In I I Well But The For The If She The The He The She The He The There We Everyone I He The He The Because He The A The The The All The But A If Then But The So To This We're This This The It The You In To This The He I I For I The But The He S I The But The When Thom This 8 He He The The I I He I I The Now She The Thank You He The The Then In But Because The The This Our The It The He The I The They She She In I He The The Lemuel He The In The The He She The A The\n",
      "When A actors The The She The These There His The Its He 7 He In The It A During The He It This She He The He The I The He He But The But This The The The The During That The All 22 Money He The The The The That His The The m*ym The But The From No He The I The His The The You The They The The Shires And The The This And One But The These I I The The In The The , The If The He In In A A The The He I I The I Dr. And Quiet This I He The The A The If She Here This Thing It He And The I They\n",
      "The The He I In So The She A Where The The The The He As She The The In For The It The The These This The But The The What But you She You He It But The I The It The There In The Her The The A There And Thus One The He She The She But He It I It Both Here They I But In A The He The Under Since The An Well Last It You The 4 He In The The The The He He I In The It We She He The One I His And The The vividly In A There The On I He He The Why His A But This I The The These The The\n",
      "This A Thus It The A But But He The He And The The The Measurements You're There He He The He The The He To It He This I The In The She For There In The The First Thomas Eisenhower You He I The They In In It If The The In The The I If I It If He He The He The The This And But What's In She I 8 The It A She As The The While It In I His We It The But The The I A He He It He It And It He He This He So There It I You The But But The D The He We I The The The I A The He That\n",
      "The And Peter But This The The The He I The I There The This If He For They She In The 4 This And If He And You The He I He 035 His The There As The After That This He In He It The He A The Contacts The The The In The The And The I It He He The And It There He That To He But We I The It The It It Some The In The His He The The It New Get He The The She Taylor He He But But The I The In He Then It The That The This The I The The I I The 1 It I The He He A He You The He\n",
      "The This Well The The The The Where The He He Of It My The It But But She The The The The The The He The , The The He This This The In Roberto He The He A Equate I The He Notte He With The The They It His The The The But And They The The It The And He The In One I It The For The 8 He The The The When He The The He At When One Today The He The A During The How S No The A At The It When That A They It As We The A He These You The She The It He It The He The A A In Here The But m*ym\n",
      "The He The The It It He But He The They The The I It It The The The The The She The But I The The The The , It He The We It And Your The I And A I It The At I The He And And Once I His My He The It For You It After His I But That His He I D This The But She He The I The The And It A Well And The And The The He There The This The Outside The At Sansom He The The But The He It His Other The If I The The The I The It I The Reading The The It In For Go The I This The He\n",
      "The In In This He And The It I I He This The From The But Don't He He I For I've The It The Sure I A In He Then He The He The He So There I The I People The The She He The If Again Miss At The When They Speaking And The What That When The He I The There If But The She The This It It We Sherman It's The It The The He The He The The In The He The But Then The One These He But I The The The And A Some But They The The I In They In He His This He His The But He For I He It The It If He A\n",
      "But He The It The I He He The In He The The Louise On The He But The The She A The For The And The It He The She The And She He I The He It And I If Now He He He The This For All If She The Furthermore He This This The It The The He The He A The A The , This In I But I All These The The A I The It The He The When The The But The The The He was The In He Institut He He I In In He The Among Pat When The There All 3 He For A A Histories The I When She There and It He They recoilless Then\n",
      "And It I That He's In And The The This But He Then These The The He But She He He This The For The Liston You The The The The This But Salt This What For If They His I In The At This The He A The In The There Get The The You You At The The He The Bonnor And The The The He We But Thus He He For The I I It The This Show He The The The 8 I The This After He You're The He He It He He More The There A It The Where He The And I He It Scotty The A It And The If And The Regiment He The Familism Certainly The It The\n",
      "I The He A There I The They The The It The The A He These A He He He , It The The The The The Then The The I He She A and But But And The The If I I I The A In He The The The It The The The It She The The He For Shires A He The He A A It The Yet There In It That In The It The For It He He For He The The A He It A He Now In The He I The I The The It If It s'accuse The The He C The 3 Where To The It She I Again , His This When The The The The The It\n"
     ]
    }
   ],
   "source": [
    "def softmax(logits, axis = -1):\n",
    "    e = np.exp(logits)\n",
    "    return e/np.sum(e, axis = axis)\n",
    "\n",
    "def sample(n = 10, temperature = .7):\n",
    "    for _ in range(n):\n",
    "        x = np.zeros((sentence_length + 1)) \n",
    "        # The first token is <S> which is irrelevant to the output.\n",
    "        x[0] = 1 # I could've used one-hot but making a sentence with one-hot seems weird. \n",
    "        i = 0\n",
    "        choices = []\n",
    "        choice = 0\n",
    "        indices = list(range(vocab_size))\n",
    "        \n",
    "        while choice != point and i < sentence_length:\n",
    "            out = np.ravel(model(x[:-1].reshape(1, sentence_length))[0, i])\n",
    "            # output shape is (batch_size, sentence_length, vocab_size)\n",
    "            probs = softmax(out / temperature, axis = -1)\n",
    "            choice = np.random.choice(indices, p = probs)\n",
    "            i = i+1\n",
    "            x[i] = choice\n",
    "            choices.append(choice)\n",
    "\n",
    "        sample = \" \".join(map(lambda x : vocab[x], choices))\n",
    "        print(sample)\n",
    "\n",
    "sample(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "799ca5ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-28T15:33:15.763977Z",
     "iopub.status.busy": "2024-07-28T15:33:15.763614Z",
     "iopub.status.idle": "2024-07-28T15:33:15.767671Z",
     "shell.execute_reply": "2024-07-28T15:33:15.766866Z"
    },
    "papermill": {
     "duration": 0.41458,
     "end_time": "2024-07-28T15:33:15.769611",
     "exception": false,
     "start_time": "2024-07-28T15:33:15.355031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# model.save(\"GPT.keras\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 2058,
     "sourceId": 131078,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30616,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1920.444134,
   "end_time": "2024-07-28T15:33:19.183562",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-28T15:01:18.739428",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
